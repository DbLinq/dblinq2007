////////////////////////////////////////////////////////////////////
// MIT license:
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
//
// Authors:
//        Jiri George Moudry
////////////////////////////////////////////////////////////////////

using System;
using System.Reflection;
using System.Collections.Generic;
using System.Text;
using System.Data.Linq;
using System.Data.Linq.Mapping;

namespace DBLinq.util
{
    public class CSharp
    {
        /// <summary>
        /// Categorize type - this will determine further processing of retrieved types
        /// </summary>
        public static TypeEnum CategorizeType(Type t)
        {
            if(IsPrimitiveType(t))
                return TypeEnum.Primitive;
            if(AttribHelper.GetTableAttrib(t)!=null)
                return TypeEnum.Column;
            if (t.IsGenericType && t.GetGenericTypeDefinition()==typeof(Nullable<>))
            {
                //make 'double?' also primitive
                Type tInner = t.GetGenericArguments()[0];
                if (IsPrimitiveType(tInner))
                    return TypeEnum.Primitive;
            }
            return TypeEnum.Other;
        }

        /// <summary>
        /// if T is string or int or DateTime? or friends, return true.
        /// </summary>
        public static bool IsPrimitiveType(Type t)
        {
            if (t.IsGenericType)
            {
                Type genericType = t.GetGenericTypeDefinition();
                if (genericType == typeof(Nullable<>))
                {
                    Type[] genericArgs = t.GetGenericArguments();
                    bool ret = IsPrimitiveType(genericArgs[0]);
                    return ret;
                }
                else
                {
                    return false;
                }
            }

            #region IsBuiltinType
            bool isBuiltinType = t==typeof(string)
                || t==typeof(short)
                || t==typeof(ushort)
                || t==typeof(int)
                || t==typeof(uint)
                || t==typeof(long)
                || t==typeof(ulong)
                || t==typeof(float)
                || t==typeof(double)
                || t==typeof(decimal)
                || t==typeof(char)
                || t==typeof(byte)
                || t == typeof(bool)
                || t==typeof(DateTime); //DateTime: not strictly a primitive time
            return isBuiltinType;
            #endregion
        }

        /// <summary>
        /// a projection has only a default ctor and some fields.
        /// A projected class is generated by the compiler and has a name like $__proj4.
        /// 
        /// Update for Beta2: f__AnonymousType is also a proj, has one ctor, >0 params
        /// </summary>
        public static bool IsProjection(Type t)
        {
            ConstructorInfo[] cinfo = t.GetConstructors();
            if (cinfo.Length == 0 && t.IsValueType)
                return true; //allow projection into user-defined structs
            if(cinfo.Length<1)
                return false;
            if (t.Name.Contains("<>f__AnonymousType"))
                return true; //Beta2 logic
            //ParameterInfo[] ctor0_params = cinfo[0].GetParameters();
            //if (ctor0_params.Length != 0)
            //    return false;
            return true;
        }

        /// <summary>
        /// is this a type with a [Table] attribute?
        /// </summary>
        public static bool IsTableType(Type t)
        {
            TableAttribute tAttrib1 = AttribHelper.GetTableAttrib(t);
            return (tAttrib1!=null);
        }


    }
}

//#########################################################################
//generated by MysqlMetal on 2007-Nov-23 - extracted from server localhost.
//#########################################################################

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Reflection;
using DBLinq.Linq;
using DBLinq.Linq.Mapping;

namespace nwind
{
    
	/// <summary>
	/// This class represents PostgreSQL database Northwind.
	/// </summary>
	public partial class Northwind : MContext
	{
		public Northwind(string connStr) : base(connStr)
		{
		}
		public Northwind(System.Data.IDbConnection connection) : base(connection)
		{
		}
	
		//these fields represent tables in database and are
		//ordered - parent tables first, child tables next. Do not change the order.
		public MTable<Territory> Territories { get { return base.GetTable<Territory>("Territories"); } }
		public MTable<Region> Regions { get { return base.GetTable<Region>("Regions"); } }
		public MTable<Supplier> Suppliers { get { return base.GetTable<Supplier>("Suppliers"); } }
		public MTable<Shipper> Shippers { get { return base.GetTable<Shipper>("Shippers"); } }
		public MTable<Category> Categories { get { return base.GetTable<Category>("Categories"); } }
		public MTable<Customer> Customers { get { return base.GetTable<Customer>("Customers"); } }
		public MTable<Employee> Employees { get { return base.GetTable<Employee>("Employees"); } }
		public MTable<Product> Products { get { return base.GetTable<Product>("Products"); } }
		public MTable<Order> Orders { get { return base.GetTable<Order>("Orders"); } }
		public MTable<Alltype> Alltypes { get { return base.GetTable<Alltype>("Alltypes"); } }
	
		#region stored procs
	
		
		[FunctionEx(Name = "hello0", ProcedureOrFunction = "")]	
		public string hello0()	
		{	
			IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));	
			return (string)result.ReturnValue;	
		}	
		
	
		
		[FunctionEx(Name = "hello1", ProcedureOrFunction = "")]	
		public string hello1([Parameter(Name = "name", DbType = "text")] string name)	
		{	
			IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name);	
			return (string)result.ReturnValue;	
		}	
		
	
		
		[FunctionEx(Name = "hello2", ProcedureOrFunction = "")]	
		public string hello2([Parameter(Name = "name", DbType = "text")] string name
				,[Parameter(Name = "unused", DbType = "text")] string unused)	
		{	
			IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, unused);	
			return (string)result.ReturnValue;	
		}	
		
	
		
		[FunctionEx(Name = "getordercount", ProcedureOrFunction = "")]	
		public int getOrderCount([Parameter(Name = "custid", DbType = "character varying")] string custid)	
		{	
			IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), custid);	
			return (int)result.ReturnValue;	
		}	
		
	
	#endregion
	}
	
	
	
	[Table(Name = "public.territories")]
	public partial class Territory : IModified
	{
		public bool IsModified { get; set; }
	
		
		protected string _territoryid;
	
		protected string _territorydescription;
	
		protected int _regionid;
	
		
		#region costructors
		public Territory()
		{
		}
		public Territory(string TerritoryID,string Territorydescription,int RegionID)
		{
		    this._territoryid = TerritoryID;
		this._territorydescription = Territorydescription;
		this._regionid = RegionID;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "territoryid", DbType = "character varying", IsPrimaryKey = true)]
		[DebuggerNonUserCode]
		public string TerritoryID
		{
		    get { return _territoryid; }
		    set { _territoryid = value; IsModified = true; }
		}
		
	
		[Column(Name = "territorydescription", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Territorydescription
		{
		    get { return _territorydescription; }
		    set { _territorydescription = value; IsModified = true; }
		}
		
	
		[Column(Name = "regionid", DbType = "integer", CanBeNull = false)]
		[DebuggerNonUserCode]
		public int RegionID
		{
		    get { return _regionid; }
		    set { _regionid = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _territoryid to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			if(_territoryid == null) return 0;
			return _territoryid.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Territory o2 = obj as Territory;
			if(o2==null)
				return false;
			return _territoryid.Equals(o2._territoryid);
		}
		#endregion
	
		
		
		private EntityRef<Region> _Region;    
		
		[Association(Storage="_Region", ThisKey="regionid", Name="fk_terr_region")]
		[DebuggerNonUserCode]
		public Region Region {
			get { return this._Region.Entity; }
			set { this._Region.Entity = value; }
		}
	}
	
	
	
	[Table(Name = "public.region")]
	public partial class Region : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _regionid;
	
		protected string _regiondescription;
	
		
		#region costructors
		public Region()
		{
		}
		public Region(int RegionID,string Regiondescription)
		{
		    this._regionid = RegionID;
		this._regiondescription = Regiondescription;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "regionid", DbType = "integer", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int RegionID
		{
		    get { return _regionid; }
		    set { _regionid = value; IsModified = true; }
		}
		
	
		[Column(Name = "regiondescription", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Regiondescription
		{
		    get { return _regiondescription; }
		    set { _regiondescription = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _regionid to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
					return _regionid.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Region o2 = obj as Region;
			if(o2==null)
				return false;
			return _regionid.Equals(o2._regionid);
		}
		#endregion
	
		
		[Association(Storage = "null", OtherKey = "regionid", Name = "fk_terr_region")]
		public EntityMSet<Territory> Territories
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
	}
	
	
	
	[Table(Name = "public.suppliers")]
	public partial class Supplier : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _supplierid;
	
		protected string _companyname;
	
		protected string _contactname;
	
		protected string _contacttitle;
	
		protected string _address;
	
		protected string _city;
	
		protected string _region;
	
		protected string _postalcode;
	
		protected string _country;
	
		protected string _phone;
	
		protected string _fax;
	
		
		#region costructors
		public Supplier()
		{
		}
		public Supplier(int SupplierID,string CompanyName,string ContactName,string Contacttitle,string Address,string City,string Region,string PostalCode,string Country,string Phone,string Fax)
		{
		    this._supplierid = SupplierID;
		this._companyname = CompanyName;
		this._contactname = ContactName;
		this._contacttitle = Contacttitle;
		this._address = Address;
		this._city = City;
		this._region = Region;
		this._postalcode = PostalCode;
		this._country = Country;
		this._phone = Phone;
		this._fax = Fax;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "supplierid", DbType = "integer", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int SupplierID
		{
		    get { return _supplierid; }
		    set { _supplierid = value; IsModified = true; }
		}
		
	
		[Column(Name = "companyname", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string CompanyName
		{
		    get { return _companyname; }
		    set { _companyname = value; IsModified = true; }
		}
		
	
		[Column(Name = "contactname", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string ContactName
		{
		    get { return _contactname; }
		    set { _contactname = value; IsModified = true; }
		}
		
	
		[Column(Name = "contacttitle", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Contacttitle
		{
		    get { return _contacttitle; }
		    set { _contacttitle = value; IsModified = true; }
		}
		
	
		[Column(Name = "address", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Address
		{
		    get { return _address; }
		    set { _address = value; IsModified = true; }
		}
		
	
		[Column(Name = "city", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string City
		{
		    get { return _city; }
		    set { _city = value; IsModified = true; }
		}
		
	
		[Column(Name = "region", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Region
		{
		    get { return _region; }
		    set { _region = value; IsModified = true; }
		}
		
	
		[Column(Name = "postalcode", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string PostalCode
		{
		    get { return _postalcode; }
		    set { _postalcode = value; IsModified = true; }
		}
		
	
		[Column(Name = "country", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Country
		{
		    get { return _country; }
		    set { _country = value; IsModified = true; }
		}
		
	
		[Column(Name = "phone", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Phone
		{
		    get { return _phone; }
		    set { _phone = value; IsModified = true; }
		}
		
	
		[Column(Name = "fax", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Fax
		{
		    get { return _fax; }
		    set { _fax = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _supplierid to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
					return _supplierid.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Supplier o2 = obj as Supplier;
			if(o2==null)
				return false;
			return _supplierid.Equals(o2._supplierid);
		}
		#endregion
	
		
		[Association(Storage = "null", OtherKey = "supplierid", Name = "fk_prod_supp")]
		public EntityMSet<Product> Products
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
	}
	
	
	
	[Table(Name = "public.shippers")]
	public partial class Shipper : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _shipperid;
	
		protected string _companyname;
	
		protected string _phone;
	
		
		#region costructors
		public Shipper()
		{
		}
		public Shipper(int ShipperID,string CompanyName,string Phone)
		{
		    this._shipperid = ShipperID;
		this._companyname = CompanyName;
		this._phone = Phone;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "shipperid", DbType = "integer", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int ShipperID
		{
		    get { return _shipperid; }
		    set { _shipperid = value; IsModified = true; }
		}
		
	
		[Column(Name = "companyname", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string CompanyName
		{
		    get { return _companyname; }
		    set { _companyname = value; IsModified = true; }
		}
		
	
		[Column(Name = "phone", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Phone
		{
		    get { return _phone; }
		    set { _phone = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _shipperid to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
					return _shipperid.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Shipper o2 = obj as Shipper;
			if(o2==null)
				return false;
			return _shipperid.Equals(o2._shipperid);
		}
		#endregion
	
		
		
	}
	
	
	
	[Table(Name = "public.categories")]
	public partial class Category : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _categoryid;
	
		protected string _categoryname;
	
		protected string _description;
	
		protected byte[] _picture;
	
		
		#region costructors
		public Category()
		{
		}
		public Category(int CategoryID,string Categoryname,string Description,byte[] Picture)
		{
		    this._categoryid = CategoryID;
		this._categoryname = Categoryname;
		this._description = Description;
		this._picture = Picture;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "categoryid", DbType = "integer", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int CategoryID
		{
		    get { return _categoryid; }
		    set { _categoryid = value; IsModified = true; }
		}
		
	
		[Column(Name = "categoryname", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Categoryname
		{
		    get { return _categoryname; }
		    set { _categoryname = value; IsModified = true; }
		}
		
	
		[Column(Name = "description", DbType = "text", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Description
		{
		    get { return _description; }
		    set { _description = value; IsModified = true; }
		}
		
	
		[Column(Name = "picture", DbType = "oid", CanBeNull = true)]
		[DebuggerNonUserCode]
		public byte[] Picture
		{
		    get { return _picture; }
		    set { _picture = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _categoryid to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
					return _categoryid.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Category o2 = obj as Category;
			if(o2==null)
				return false;
			return _categoryid.Equals(o2._categoryid);
		}
		#endregion
	
		
		[Association(Storage = "null", OtherKey = "categoryid", Name = "fk_prod_catg")]
		public EntityMSet<Product> Products
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
	}
	
	
	
	[Table(Name = "public.customers")]
	public partial class Customer : IModified
	{
		public bool IsModified { get; set; }
	
		
		protected string _customerid;
	
		protected string _companyname;
	
		protected string _contactname;
	
		protected string _contacttitle;
	
		protected string _address;
	
		protected string _city;
	
		protected string _region;
	
		protected string _postalcode;
	
		protected string _country;
	
		protected string _phone;
	
		protected string _fax;
	
		
		#region costructors
		public Customer()
		{
		}
		public Customer(string CustomerID,string CompanyName,string ContactName,string Contacttitle,string Address,string City,string Region,string PostalCode,string Country,string Phone,string Fax)
		{
		    this._customerid = CustomerID;
		this._companyname = CompanyName;
		this._contactname = ContactName;
		this._contacttitle = Contacttitle;
		this._address = Address;
		this._city = City;
		this._region = Region;
		this._postalcode = PostalCode;
		this._country = Country;
		this._phone = Phone;
		this._fax = Fax;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "customerid", DbType = "character varying", IsPrimaryKey = true)]
		[DebuggerNonUserCode]
		public string CustomerID
		{
		    get { return _customerid; }
		    set { _customerid = value; IsModified = true; }
		}
		
	
		[Column(Name = "companyname", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string CompanyName
		{
		    get { return _companyname; }
		    set { _companyname = value; IsModified = true; }
		}
		
	
		[Column(Name = "contactname", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string ContactName
		{
		    get { return _contactname; }
		    set { _contactname = value; IsModified = true; }
		}
		
	
		[Column(Name = "contacttitle", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Contacttitle
		{
		    get { return _contacttitle; }
		    set { _contacttitle = value; IsModified = true; }
		}
		
	
		[Column(Name = "address", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Address
		{
		    get { return _address; }
		    set { _address = value; IsModified = true; }
		}
		
	
		[Column(Name = "city", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string City
		{
		    get { return _city; }
		    set { _city = value; IsModified = true; }
		}
		
	
		[Column(Name = "region", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Region
		{
		    get { return _region; }
		    set { _region = value; IsModified = true; }
		}
		
	
		[Column(Name = "postalcode", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string PostalCode
		{
		    get { return _postalcode; }
		    set { _postalcode = value; IsModified = true; }
		}
		
	
		[Column(Name = "country", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Country
		{
		    get { return _country; }
		    set { _country = value; IsModified = true; }
		}
		
	
		[Column(Name = "phone", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Phone
		{
		    get { return _phone; }
		    set { _phone = value; IsModified = true; }
		}
		
	
		[Column(Name = "fax", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Fax
		{
		    get { return _fax; }
		    set { _fax = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _customerid to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			if(_customerid == null) return 0;
			return _customerid.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Customer o2 = obj as Customer;
			if(o2==null)
				return false;
			return _customerid.Equals(o2._customerid);
		}
		#endregion
	
		
		[Association(Storage = "null", OtherKey = "customerid", Name = "fk_order_customer")]
		public EntityMSet<Order> Orders
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
	}
	
	
	
	[Table(Name = "public.employees")]
	public partial class Employee : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _employeeid;
	
		protected string _lastname;
	
		protected string _firstname;
	
		protected string _title;
	
		protected DateTime? _birthdate;
	
		protected DateTime? _hiredate;
	
		protected string _address;
	
		protected string _city;
	
		protected string _region;
	
		protected string _postalcode;
	
		protected string _country;
	
		protected string _homephone;
	
		protected byte[] _photo;
	
		protected string _notes;
	
		protected int? _reportsto;
	
		
		#region costructors
		public Employee()
		{
		}
		public Employee(int EmployeeID,string LastName,string FirstName,string Title,DateTime? Birthdate,DateTime? HireDate,string Address,string City,string Region,string PostalCode,string Country,string Homephone,byte[] Photo,string Notes,int? ReportsTo)
		{
		    this._employeeid = EmployeeID;
		this._lastname = LastName;
		this._firstname = FirstName;
		this._title = Title;
		this._birthdate = Birthdate;
		this._hiredate = HireDate;
		this._address = Address;
		this._city = City;
		this._region = Region;
		this._postalcode = PostalCode;
		this._country = Country;
		this._homephone = Homephone;
		this._photo = Photo;
		this._notes = Notes;
		this._reportsto = ReportsTo;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "employeeid", DbType = "integer", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int EmployeeID
		{
		    get { return _employeeid; }
		    set { _employeeid = value; IsModified = true; }
		}
		
	
		[Column(Name = "lastname", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string LastName
		{
		    get { return _lastname; }
		    set { _lastname = value; IsModified = true; }
		}
		
	
		[Column(Name = "firstname", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string FirstName
		{
		    get { return _firstname; }
		    set { _firstname = value; IsModified = true; }
		}
		
	
		[Column(Name = "title", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Title
		{
		    get { return _title; }
		    set { _title = value; IsModified = true; }
		}
		
	
		[Column(Name = "birthdate", DbType = "date", CanBeNull = true)]
		[DebuggerNonUserCode]
		public DateTime? Birthdate
		{
		    get { return _birthdate; }
		    set { _birthdate = value; IsModified = true; }
		}
		
	
		[Column(Name = "hiredate", DbType = "timestamp without time zone", CanBeNull = true)]
		[DebuggerNonUserCode]
		public DateTime? HireDate
		{
		    get { return _hiredate; }
		    set { _hiredate = value; IsModified = true; }
		}
		
	
		[Column(Name = "address", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Address
		{
		    get { return _address; }
		    set { _address = value; IsModified = true; }
		}
		
	
		[Column(Name = "city", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string City
		{
		    get { return _city; }
		    set { _city = value; IsModified = true; }
		}
		
	
		[Column(Name = "region", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Region
		{
		    get { return _region; }
		    set { _region = value; IsModified = true; }
		}
		
	
		[Column(Name = "postalcode", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string PostalCode
		{
		    get { return _postalcode; }
		    set { _postalcode = value; IsModified = true; }
		}
		
	
		[Column(Name = "country", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Country
		{
		    get { return _country; }
		    set { _country = value; IsModified = true; }
		}
		
	
		[Column(Name = "homephone", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Homephone
		{
		    get { return _homephone; }
		    set { _homephone = value; IsModified = true; }
		}
		
	
		[Column(Name = "photo", DbType = "oid", CanBeNull = true)]
		[DebuggerNonUserCode]
		public byte[] Photo
		{
		    get { return _photo; }
		    set { _photo = value; IsModified = true; }
		}
		
	
		[Column(Name = "notes", DbType = "text", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Notes
		{
		    get { return _notes; }
		    set { _notes = value; IsModified = true; }
		}
		
	
		[Column(Name = "reportsto", DbType = "integer", CanBeNull = true)]
		[DebuggerNonUserCode]
		public int? ReportsTo
		{
		    get { return _reportsto; }
		    set { _reportsto = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _employeeid to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
					return _employeeid.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Employee o2 = obj as Employee;
			if(o2==null)
				return false;
			return _employeeid.Equals(o2._employeeid);
		}
		#endregion
	
		
		[Association(Storage = "null", OtherKey = "reportsto", Name = "fk_emp_reportstoemp")]
		public EntityMSet<Employee> Employees
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
		[Association(Storage = "null", OtherKey = "employeeid", Name = "fk_order_product")]
		public EntityMSet<Order> Orders
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
		private EntityRef<Employee> _Employee;    
		
		[Association(Storage="_Employee", ThisKey="reportsto", Name="fk_emp_reportstoemp")]
		[DebuggerNonUserCode]
		public Employee reportstoEmployee {
			get { return this._Employee.Entity; }
			set { this._Employee.Entity = value; }
		}
	}
	
	
	
	[Table(Name = "public.products")]
	public partial class Product : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _productid;
	
		protected string _productname;
	
		protected int? _supplierid;
	
		protected int? _categoryid;
	
		protected string _quantityperunit;
	
		protected decimal? _unitprice;
	
		protected short? _unitsinstock;
	
		protected short? _unitsonorder;
	
		protected short? _reorderlevel;
	
		protected bool _discontinued;
	
		
		#region costructors
		public Product()
		{
		}
		public Product(int ProductID,string ProductName,int? SupplierID,int? CategoryID,string QuantityPerUnit,decimal? UnitPrice,short? UnitsInStock,short? UnitsOnOrder,short? Reorderlevel,bool Discontinued)
		{
		    this._productid = ProductID;
		this._productname = ProductName;
		this._supplierid = SupplierID;
		this._categoryid = CategoryID;
		this._quantityperunit = QuantityPerUnit;
		this._unitprice = UnitPrice;
		this._unitsinstock = UnitsInStock;
		this._unitsonorder = UnitsOnOrder;
		this._reorderlevel = Reorderlevel;
		this._discontinued = Discontinued;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "productid", DbType = "integer", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int ProductID
		{
		    get { return _productid; }
		    set { _productid = value; IsModified = true; }
		}
		
	
		[Column(Name = "productname", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string ProductName
		{
		    get { return _productname; }
		    set { _productname = value; IsModified = true; }
		}
		
	
		[Column(Name = "supplierid", DbType = "integer", CanBeNull = true)]
		[DebuggerNonUserCode]
		public int? SupplierID
		{
		    get { return _supplierid; }
		    set { _supplierid = value; IsModified = true; }
		}
		
	
		[Column(Name = "categoryid", DbType = "integer", CanBeNull = true)]
		[DebuggerNonUserCode]
		public int? CategoryID
		{
		    get { return _categoryid; }
		    set { _categoryid = value; IsModified = true; }
		}
		
	
		[Column(Name = "quantityperunit", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string QuantityPerUnit
		{
		    get { return _quantityperunit; }
		    set { _quantityperunit = value; IsModified = true; }
		}
		
	
		[Column(Name = "unitprice", DbType = "numeric", CanBeNull = true)]
		[DebuggerNonUserCode]
		public decimal? UnitPrice
		{
		    get { return _unitprice; }
		    set { _unitprice = value; IsModified = true; }
		}
		
	
		[Column(Name = "unitsinstock", DbType = "smallint", CanBeNull = true)]
		[DebuggerNonUserCode]
		public short? UnitsInStock
		{
		    get { return _unitsinstock; }
		    set { _unitsinstock = value; IsModified = true; }
		}
		
	
		[Column(Name = "unitsonorder", DbType = "smallint", CanBeNull = true)]
		[DebuggerNonUserCode]
		public short? UnitsOnOrder
		{
		    get { return _unitsonorder; }
		    set { _unitsonorder = value; IsModified = true; }
		}
		
	
		[Column(Name = "reorderlevel", DbType = "smallint", CanBeNull = true)]
		[DebuggerNonUserCode]
		public short? Reorderlevel
		{
		    get { return _reorderlevel; }
		    set { _reorderlevel = value; IsModified = true; }
		}
		
	
		[Column(Name = "discontinued", DbType = "bit", CanBeNull = false)]
		[DebuggerNonUserCode]
		public bool Discontinued
		{
		    get { return _discontinued; }
		    set { _discontinued = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _productid to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
					return _productid.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Product o2 = obj as Product;
			if(o2==null)
				return false;
			return _productid.Equals(o2._productid);
		}
		#endregion
	
		
		
		private EntityRef<Category> _Category;    
		
		[Association(Storage="_Category", ThisKey="categoryid", Name="fk_prod_catg")]
		[DebuggerNonUserCode]
		public Category Category {
			get { return this._Category.Entity; }
			set { this._Category.Entity = value; }
		}
		
		private EntityRef<Supplier> _Supplier;    
		
		[Association(Storage="_Supplier", ThisKey="supplierid", Name="fk_prod_supp")]
		[DebuggerNonUserCode]
		public Supplier Supplier {
			get { return this._Supplier.Entity; }
			set { this._Supplier.Entity = value; }
		}
	}
	
	
	
	[Table(Name = "public.orders")]
	public partial class Order : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _orderid;
	
		protected string _customerid;
	
		protected int? _employeeid;
	
		protected DateTime? _orderdate;
	
		protected DateTime? _requireddate;
	
		protected DateTime? _shippeddate;
	
		protected int? _shipvia;
	
		protected decimal? _freight;
	
		protected string _shipname;
	
		protected string _shipaddress;
	
		protected string _shipcity;
	
		protected string _shipregion;
	
		protected string _shippostalcode;
	
		protected string _shipcountry;
	
		
		#region costructors
		public Order()
		{
		}
		public Order(int OrderID,string CustomerID,int? EmployeeID,DateTime? OrderDate,DateTime? Requireddate,DateTime? Shippeddate,int? Shipvia,decimal? Freight,string Shipname,string Shipaddress,string Shipcity,string Shipregion,string Shippostalcode,string Shipcountry)
		{
		    this._orderid = OrderID;
		this._customerid = CustomerID;
		this._employeeid = EmployeeID;
		this._orderdate = OrderDate;
		this._requireddate = Requireddate;
		this._shippeddate = Shippeddate;
		this._shipvia = Shipvia;
		this._freight = Freight;
		this._shipname = Shipname;
		this._shipaddress = Shipaddress;
		this._shipcity = Shipcity;
		this._shipregion = Shipregion;
		this._shippostalcode = Shippostalcode;
		this._shipcountry = Shipcountry;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "orderid", DbType = "integer", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int OrderID
		{
		    get { return _orderid; }
		    set { _orderid = value; IsModified = true; }
		}
		
	
		[Column(Name = "customerid", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string CustomerID
		{
		    get { return _customerid; }
		    set { _customerid = value; IsModified = true; }
		}
		
	
		[Column(Name = "employeeid", DbType = "integer", CanBeNull = true)]
		[DebuggerNonUserCode]
		public int? EmployeeID
		{
		    get { return _employeeid; }
		    set { _employeeid = value; IsModified = true; }
		}
		
	
		[Column(Name = "orderdate", DbType = "timestamp without time zone", CanBeNull = true)]
		[DebuggerNonUserCode]
		public DateTime? OrderDate
		{
		    get { return _orderdate; }
		    set { _orderdate = value; IsModified = true; }
		}
		
	
		[Column(Name = "requireddate", DbType = "timestamp without time zone", CanBeNull = true)]
		[DebuggerNonUserCode]
		public DateTime? Requireddate
		{
		    get { return _requireddate; }
		    set { _requireddate = value; IsModified = true; }
		}
		
	
		[Column(Name = "shippeddate", DbType = "timestamp without time zone", CanBeNull = true)]
		[DebuggerNonUserCode]
		public DateTime? Shippeddate
		{
		    get { return _shippeddate; }
		    set { _shippeddate = value; IsModified = true; }
		}
		
	
		[Column(Name = "shipvia", DbType = "integer", CanBeNull = true)]
		[DebuggerNonUserCode]
		public int? Shipvia
		{
		    get { return _shipvia; }
		    set { _shipvia = value; IsModified = true; }
		}
		
	
		[Column(Name = "freight", DbType = "numeric", CanBeNull = true)]
		[DebuggerNonUserCode]
		public decimal? Freight
		{
		    get { return _freight; }
		    set { _freight = value; IsModified = true; }
		}
		
	
		[Column(Name = "shipname", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Shipname
		{
		    get { return _shipname; }
		    set { _shipname = value; IsModified = true; }
		}
		
	
		[Column(Name = "shipaddress", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Shipaddress
		{
		    get { return _shipaddress; }
		    set { _shipaddress = value; IsModified = true; }
		}
		
	
		[Column(Name = "shipcity", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Shipcity
		{
		    get { return _shipcity; }
		    set { _shipcity = value; IsModified = true; }
		}
		
	
		[Column(Name = "shipregion", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Shipregion
		{
		    get { return _shipregion; }
		    set { _shipregion = value; IsModified = true; }
		}
		
	
		[Column(Name = "shippostalcode", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Shippostalcode
		{
		    get { return _shippostalcode; }
		    set { _shippostalcode = value; IsModified = true; }
		}
		
	
		[Column(Name = "shipcountry", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Shipcountry
		{
		    get { return _shipcountry; }
		    set { _shipcountry = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _orderid to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
					return _orderid.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Order o2 = obj as Order;
			if(o2==null)
				return false;
			return _orderid.Equals(o2._orderid);
		}
		#endregion
	
		
		
		private EntityRef<Customer> _Customer;    
		
		[Association(Storage="_Customer", ThisKey="customerid", Name="fk_order_customer")]
		[DebuggerNonUserCode]
		public Customer Customer {
			get { return this._Customer.Entity; }
			set { this._Customer.Entity = value; }
		}
		
		private EntityRef<Employee> _Employee;    
		
		[Association(Storage="_Employee", ThisKey="employeeid", Name="fk_order_product")]
		[DebuggerNonUserCode]
		public Employee Employee {
			get { return this._Employee.Entity; }
			set { this._Employee.Entity = value; }
		}
	}
	
	
	
	[Table(Name = "public.alltypes")]
	public partial class Alltype : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _int;
	
		protected int? _intn;
	
		protected double _double;
	
		protected double? _doublen;
	
		protected decimal _decimal;
	
		protected decimal? _decimaln;
	
		protected DateTime _datetime;
	
		protected DateTime? _datetimen;
	
		
		#region costructors
		public Alltype()
		{
		}
		public Alltype(int Int,int? Intn,double Double,double? Doublen,decimal Decimal,decimal? Decimaln,DateTime Datetime,DateTime? Datetimen)
		{
		    this._int = Int;
		this._intn = Intn;
		this._double = Double;
		this._doublen = Doublen;
		this._decimal = Decimal;
		this._decimaln = Decimaln;
		this._datetime = Datetime;
		this._datetimen = Datetimen;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "int", DbType = "integer", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int Int
		{
		    get { return _int; }
		    set { _int = value; IsModified = true; }
		}
		
	
		[Column(Name = "intn", DbType = "integer", CanBeNull = true)]
		[DebuggerNonUserCode]
		public int? Intn
		{
		    get { return _intn; }
		    set { _intn = value; IsModified = true; }
		}
		
	
		[Column(Name = "double", DbType = "double precision", CanBeNull = false)]
		[DebuggerNonUserCode]
		public double Double
		{
		    get { return _double; }
		    set { _double = value; IsModified = true; }
		}
		
	
		[Column(Name = "doublen", DbType = "double precision", CanBeNull = true)]
		[DebuggerNonUserCode]
		public double? Doublen
		{
		    get { return _doublen; }
		    set { _doublen = value; IsModified = true; }
		}
		
	
		[Column(Name = "decimal", DbType = "numeric", CanBeNull = false)]
		[DebuggerNonUserCode]
		public decimal Decimal
		{
		    get { return _decimal; }
		    set { _decimal = value; IsModified = true; }
		}
		
	
		[Column(Name = "decimaln", DbType = "numeric", CanBeNull = true)]
		[DebuggerNonUserCode]
		public decimal? Decimaln
		{
		    get { return _decimaln; }
		    set { _decimaln = value; IsModified = true; }
		}
		
	
		[Column(Name = "datetime", DbType = "timestamp without time zone", CanBeNull = false)]
		[DebuggerNonUserCode]
		public DateTime Datetime
		{
		    get { return _datetime; }
		    set { _datetime = value; IsModified = true; }
		}
		
	
		[Column(Name = "datetimen", DbType = "timestamp without time zone", CanBeNull = true)]
		[DebuggerNonUserCode]
		public DateTime? Datetimen
		{
		    get { return _datetimen; }
		    set { _datetimen = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _int to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
					return _int.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Alltype o2 = obj as Alltype;
			if(o2==null)
				return false;
			return _int.Equals(o2._int);
		}
		#endregion
	
		
		
	}
	
}

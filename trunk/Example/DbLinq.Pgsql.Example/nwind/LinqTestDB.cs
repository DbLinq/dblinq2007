//#########################################################################
//generated by MysqlMetal on 2007-Oct-15 - extracted from file pg.dbml.
//#########################################################################

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Reflection;
using DBLinq.Linq;
using DBLinq.Linq.Mapping;

namespace Client2.user
{
    
	/// <summary>
	/// This class represents PostgreSQL database LinqTestDB.
	/// </summary>
	public partial class LinqTestDB : MContext
	{
		public LinqTestDB(string connStr):base(connStr)
		{
			Customers = new MTable<Customer>(this);
			Products = new MTable<Product>(this);
			Orders = new MTable<Order>(this);
			Alltypes = new MTable<Alltype>(this);
		}
	
		//these fields represent tables in database and are
		//ordered - parent tables first, child tables next. Do not change the order.
		public readonly MTable<Customer> Customers;
		public readonly MTable<Product> Products;
		public readonly MTable<Order> Orders;
		public readonly MTable<Alltype> Alltypes;
	
			
		[FunctionEx(Name = "hello0", ProcedureOrFunction = "")]	
		public string hello0()	
		{	
			IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));	
			return (string)result.ReturnValue;	
		}	
		
	
		
		[FunctionEx(Name = "hello1", ProcedureOrFunction = "")]	
		public string hello1([Parameter(Name = "name", DbType = "text")] string name)	
		{	
			IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name);	
			return (string)result.ReturnValue;	
		}	
		
	
		
		[FunctionEx(Name = "getordercount", ProcedureOrFunction = "")]	
		public int getOrderCount([Parameter(Name = "custid", DbType = "integer")] int custid)	
		{	
			IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), custid);	
			return (int)result.ReturnValue;	
		}	
		
	
		
		[FunctionEx(Name = "hello2", ProcedureOrFunction = "")]	
		public string hello2([Parameter(Name = "name", DbType = "text")] string name
				,[Parameter(Name = "unused", DbType = "text")] string unused)	
		{	
			IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, unused);	
			return (string)result.ReturnValue;	
		}	
		
	}
	
	
	
	[Table(Name = "customer")]
	public partial class Customer : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _customerid;
	
		protected string _companyname;
	
		protected string _contactname;
	
		protected string _city;
	
		protected string _postalcode;
	
		protected string _country;
	
		protected string _phone;
	
		
		#region costructors
		public Customer()
		{
		}
		public Customer(int CustomerID,string CompanyName,string ContactName,string City,string PostalCode,string Country,string Phone)
		{
		    this._customerid = CustomerID;
		this._companyname = CompanyName;
		this._contactname = ContactName;
		this._city = City;
		this._postalcode = PostalCode;
		this._country = Country;
		this._phone = Phone;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "customerid", DbType = "integer", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int CustomerID
		{
		    get { return _customerid; }
		    set { _customerid = value; IsModified = true; }
		}
		
	
		[Column(Name = "companyname", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string CompanyName
		{
		    get { return _companyname; }
		    set { _companyname = value; IsModified = true; }
		}
		
	
		[Column(Name = "contactname", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string ContactName
		{
		    get { return _contactname; }
		    set { _contactname = value; IsModified = true; }
		}
		
	
		[Column(Name = "city", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string City
		{
		    get { return _city; }
		    set { _city = value; IsModified = true; }
		}
		
	
		[Column(Name = "postalcode", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string PostalCode
		{
		    get { return _postalcode; }
		    set { _postalcode = value; IsModified = true; }
		}
		
	
		[Column(Name = "country", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Country
		{
		    get { return _country; }
		    set { _country = value; IsModified = true; }
		}
		
	
		[Column(Name = "phone", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string Phone
		{
		    get { return _phone; }
		    set { _phone = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _customerid to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _customerid.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Customer o2 = obj as Customer;
			if(o2==null)
				return false;
			return _customerid.Equals(o2._customerid);
		}
		#endregion
	
		
		[Association(Storage = "null", OtherKey = "customerid", Name = "fk_order_customer")]
		public EntityMSet<Order> Orders
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
	}
	
	
	
	[Table(Name = "products")]
	public partial class Product : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _productid;
	
		protected string _productname;
	
		protected int _supplierid;
	
		protected int _categoryid;
	
		protected string _quantityperunit;
	
		
		#region costructors
		public Product()
		{
		}
		public Product(int ProductID,string ProductName,int SupplierID,int CategoryID,string QuantityPerUnit)
		{
		    this._productid = ProductID;
		this._productname = ProductName;
		this._supplierid = SupplierID;
		this._categoryid = CategoryID;
		this._quantityperunit = QuantityPerUnit;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "productid", DbType = "integer", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int ProductID
		{
		    get { return _productid; }
		    set { _productid = value; IsModified = true; }
		}
		
	
		[Column(Name = "productname", DbType = "character varying", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string ProductName
		{
		    get { return _productname; }
		    set { _productname = value; IsModified = true; }
		}
		
	
		[Column(Name = "supplierid", DbType = "integer", CanBeNull = false)]
		[DebuggerNonUserCode]
		public int SupplierID
		{
		    get { return _supplierid; }
		    set { _supplierid = value; IsModified = true; }
		}
		
	
		[Column(Name = "categoryid", DbType = "integer", CanBeNull = false)]
		[DebuggerNonUserCode]
		public int CategoryID
		{
		    get { return _categoryid; }
		    set { _categoryid = value; IsModified = true; }
		}
		
	
		[Column(Name = "quantityperunit", DbType = "character varying", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string QuantityPerUnit
		{
		    get { return _quantityperunit; }
		    set { _quantityperunit = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _productid to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _productid.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Product o2 = obj as Product;
			if(o2==null)
				return false;
			return _productid.Equals(o2._productid);
		}
		#endregion
	
		
		[Association(Storage = "null", OtherKey = "productid", Name = "fk_order_product")]
		public EntityMSet<Order> Orders
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
	}
	
	
	
	[Table(Name = "orders")]
	public partial class Order : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _orderid;
	
		protected int _customerid;
	
		protected int _productid;
	
		protected DateTime _orderdate;
	
		
		#region costructors
		public Order()
		{
		}
		public Order(int OrderID,int CustomerID,int ProductID,DateTime OrderDate)
		{
		    this._orderid = OrderID;
		this._customerid = CustomerID;
		this._productid = ProductID;
		this._orderdate = OrderDate;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "orderid", DbType = "integer", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int OrderID
		{
		    get { return _orderid; }
		    set { _orderid = value; IsModified = true; }
		}
		
	
		[Column(Name = "customerid", DbType = "integer", CanBeNull = false)]
		[DebuggerNonUserCode]
		public int CustomerID
		{
		    get { return _customerid; }
		    set { _customerid = value; IsModified = true; }
		}
		
	
		[Column(Name = "productid", DbType = "integer", CanBeNull = false)]
		[DebuggerNonUserCode]
		public int ProductID
		{
		    get { return _productid; }
		    set { _productid = value; IsModified = true; }
		}
		
	
		[Column(Name = "orderdate", DbType = "timestamp without time zone", CanBeNull = false)]
		[DebuggerNonUserCode]
		public DateTime OrderDate
		{
		    get { return _orderdate; }
		    set { _orderdate = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _orderid to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _orderid.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Order o2 = obj as Order;
			if(o2==null)
				return false;
			return _orderid.Equals(o2._orderid);
		}
		#endregion
	
		
		
		private EntityRef<Customer> _Customer;    
		
		[Association(Storage="_Customer", ThisKey="customerid", Name="fk_order_customer")]
		[DebuggerNonUserCode]
		public Customer Customer {
			get { return this._Customer.Entity; }
			set { this._Customer.Entity = value; }
		}
		
		
		private EntityRef<Product> _Product;    
		
		[Association(Storage="_Product", ThisKey="productid", Name="fk_order_product")]
		[DebuggerNonUserCode]
		public Product Product {
			get { return this._Product.Entity; }
			set { this._Product.Entity = value; }
		}
		
	}
	
	
	
	[Table(Name = "alltypes")]
	public partial class Alltype : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _int;
	
		protected int? _intn;
	
		protected double _double;
	
		protected double _doublen;
	
		protected decimal _decimal;
	
		protected decimal _decimaln;
	
		protected DateTime _datetime;
	
		protected DateTime? _datetimen;
	
		
		#region costructors
		public Alltype()
		{
		}
		public Alltype(int Int,int? Intn,double Double,double Doublen,decimal Decimal,decimal Decimaln,DateTime Datetime,DateTime? Datetimen)
		{
		    this._int = Int;
		this._intn = Intn;
		this._double = Double;
		this._doublen = Doublen;
		this._decimal = Decimal;
		this._decimaln = Decimaln;
		this._datetime = Datetime;
		this._datetimen = Datetimen;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "int", DbType = "integer", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int Int
		{
		    get { return _int; }
		    set { _int = value; IsModified = true; }
		}
		
	
		[Column(Name = "intn", DbType = "integer", CanBeNull = true)]
		[DebuggerNonUserCode]
		public int? Intn
		{
		    get { return _intn; }
		    set { _intn = value; IsModified = true; }
		}
		
	
		[Column(Name = "double", DbType = "double precision", CanBeNull = false)]
		[DebuggerNonUserCode]
		public double Double
		{
		    get { return _double; }
		    set { _double = value; IsModified = true; }
		}
		
	
		[Column(Name = "doublen", DbType = "double precision", CanBeNull = true)]
		[DebuggerNonUserCode]
		public double Doublen
		{
		    get { return _doublen; }
		    set { _doublen = value; IsModified = true; }
		}
		
	
		[Column(Name = "decimal", DbType = "numeric", CanBeNull = false)]
		[DebuggerNonUserCode]
		public decimal Decimal
		{
		    get { return _decimal; }
		    set { _decimal = value; IsModified = true; }
		}
		
	
		[Column(Name = "decimaln", DbType = "numeric", CanBeNull = true)]
		[DebuggerNonUserCode]
		public decimal Decimaln
		{
		    get { return _decimaln; }
		    set { _decimaln = value; IsModified = true; }
		}
		
	
		[Column(Name = "datetime", DbType = "timestamp without time zone", CanBeNull = false)]
		[DebuggerNonUserCode]
		public DateTime Datetime
		{
		    get { return _datetime; }
		    set { _datetime = value; IsModified = true; }
		}
		
	
		[Column(Name = "datetimen", DbType = "timestamp without time zone", CanBeNull = true)]
		[DebuggerNonUserCode]
		public DateTime? Datetimen
		{
		    get { return _datetimen; }
		    set { _datetimen = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _int to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _int.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Alltype o2 = obj as Alltype;
			if(o2==null)
				return false;
			return _int.Equals(o2._int);
		}
		#endregion
	
		
		
	}
	
}

//#########################################################################
//generated by MysqlMetal on 2008-janv.-11 - extracted from file .
//#########################################################################

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Text;
using System.Linq;
//using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Reflection;
using DBLinq.Linq;
using DBLinq.Linq.Mapping;

/// <summary>
/// This class represents SQLite database Northwind.
/// </summary>
public partial class Northwind : Context
{
	public Northwind(string connStr) : base(connStr)
	{
	}
	public Northwind(System.Data.IDbConnection connection) : base(connection)
	{
	}

	//these fields represent tables in database and are
	//ordered - parent tables first, child tables next. Do not change the order.
	public Table<Region> Regions { get { return base.GetTable<Region>("Regions"); } }
	public Table<Products> Products { get { return base.GetTable<Products>("Products"); } }
	public Table<Orders> Orders { get { return base.GetTable<Orders>("Orders"); } }
	public Table<Territories> Territories { get { return base.GetTable<Territories>("Territories"); } }
	public Table<Suppliers> Suppliers { get { return base.GetTable<Suppliers>("Suppliers"); } }
	public Table<Shippers> Shippers { get { return base.GetTable<Shippers>("Shippers"); } }
	public Table<Customers> Customers { get { return base.GetTable<Customers>("Customers"); } }
	public Table<Categories> Categories { get { return base.GetTable<Categories>("Categories"); } }
	public Table<Alltypes> Alltypes { get { return base.GetTable<Alltypes>("Alltypes"); } }
	public Table<Orderdetails> Orderdetails { get { return base.GetTable<Orderdetails>("Orderdetails"); } }
	public Table<Employees> Employees { get { return base.GetTable<Employees>("Employees"); } }
	public Table<Employeeterritories> Employeeterritories { get { return base.GetTable<Employeeterritories>("Employeeterritories"); } }

	
}



[Table(Name = "Region")]
public partial class Region : IModified
{
	
	protected int _RegionID;
	protected string _RegionDescription;

	
	#region costructors
	public Region()
	{
	}
	public Region(int RegionID,string RegionDescription)
	{
	    this._RegionID = RegionID;
	this._RegionDescription = RegionDescription;
	}
	#endregion
	

	#region properties - accessors

	[Column(Storage = "_RegionID", Name = "RegionID", DbType = "INTEGER", IsPrimaryKey = true)]
	[DebuggerNonUserCode]
	public int RegionID
	{
	    get { return _RegionID; }
	    set { _RegionID = value; IsModified = true; }
	}
	

	[Column(Storage = "_RegionDescription", Name = "RegionDescription", DbType = "VARCHAR(50)", CanBeNull = false)]
	[DebuggerNonUserCode]
	public string RegionDescription
	{
	    get { return _RegionDescription; }
	    set { _RegionDescription = value; IsModified = true; }
	}
	
#endregion
	
	#region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
	//TODO: move this logic our of user code, into a generated class
	public override int GetHashCode()
	{
		return _RegionID.GetHashCode();
	}
	public override bool Equals(object obj)
	{
		Region o2 = obj as Region;
		if(o2==null)
			return false;
		return _RegionID == o2._RegionID;
	}
	#endregion

	
	

	public bool IsModified { get; set; }
}



[Table(Name = "Products")]
public partial class Products : IModified
{
	
	protected int _ProductID;
	protected string _ProductName;
	protected int? _SupplierID;
	protected int? _CategoryID;
	protected string _QuantityPerUnit;
	protected decimal? _UnitPrice;
	protected short? _UnitsInStock;
	protected short? _UnitsOnOrder;
	protected short? _ReorderLevel;
	protected bool _Discontinued;

	
	#region costructors
	public Products()
	{
	}
	public Products(int ProductID,string ProductName,int? SupplierID,int? CategoryID,string QuantityPerUnit,decimal? UnitPrice,short? UnitsInStock,short? UnitsOnOrder,short? ReorderLevel,bool Discontinued)
	{
	    this._ProductID = ProductID;
	this._ProductName = ProductName;
	this._SupplierID = SupplierID;
	this._CategoryID = CategoryID;
	this._QuantityPerUnit = QuantityPerUnit;
	this._UnitPrice = UnitPrice;
	this._UnitsInStock = UnitsInStock;
	this._UnitsOnOrder = UnitsOnOrder;
	this._ReorderLevel = ReorderLevel;
	this._Discontinued = Discontinued;
	}
	#endregion
	

	#region properties - accessors

	[Column(Storage = "_ProductID", Name = "ProductID", DbType = "INTEGER", IsPrimaryKey = true)]
	[DebuggerNonUserCode]
	public int ProductID
	{
	    get { return _ProductID; }
	    set { _ProductID = value; IsModified = true; }
	}
	

	[Column(Storage = "_ProductName", Name = "ProductName", DbType = "VARCHAR(40)", CanBeNull = false)]
	[DebuggerNonUserCode]
	public string ProductName
	{
	    get { return _ProductName; }
	    set { _ProductName = value; IsModified = true; }
	}
	

	[Column(Storage = "_SupplierID", Name = "SupplierID", DbType = "INTEGER", CanBeNull = true)]
	[DebuggerNonUserCode]
	public int? SupplierID
	{
	    get { return _SupplierID; }
	    set { _SupplierID = value; IsModified = true; }
	}
	

	[Column(Storage = "_CategoryID", Name = "CategoryID", DbType = "INTEGER", CanBeNull = true)]
	[DebuggerNonUserCode]
	public int? CategoryID
	{
	    get { return _CategoryID; }
	    set { _CategoryID = value; IsModified = true; }
	}
	

	[Column(Storage = "_QuantityPerUnit", Name = "QuantityPerUnit", DbType = "VARCHAR(20)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string QuantityPerUnit
	{
	    get { return _QuantityPerUnit; }
	    set { _QuantityPerUnit = value; IsModified = true; }
	}
	

	[Column(Storage = "_UnitPrice", Name = "UnitPrice", DbType = "DECIMAL", CanBeNull = true)]
	[DebuggerNonUserCode]
	public decimal? UnitPrice
	{
	    get { return _UnitPrice; }
	    set { _UnitPrice = value; IsModified = true; }
	}
	

	[Column(Storage = "_UnitsInStock", Name = "UnitsInStock", DbType = "SMALLINT", CanBeNull = true)]
	[DebuggerNonUserCode]
	public short? UnitsInStock
	{
	    get { return _UnitsInStock; }
	    set { _UnitsInStock = value; IsModified = true; }
	}
	

	[Column(Storage = "_UnitsOnOrder", Name = "UnitsOnOrder", DbType = "SMALLINT", CanBeNull = true)]
	[DebuggerNonUserCode]
	public short? UnitsOnOrder
	{
	    get { return _UnitsOnOrder; }
	    set { _UnitsOnOrder = value; IsModified = true; }
	}
	

	[Column(Storage = "_ReorderLevel", Name = "ReorderLevel", DbType = "SMALLINT", CanBeNull = true)]
	[DebuggerNonUserCode]
	public short? ReorderLevel
	{
	    get { return _ReorderLevel; }
	    set { _ReorderLevel = value; IsModified = true; }
	}
	

	[Column(Storage = "_Discontinued", Name = "Discontinued", DbType = "BIT", CanBeNull = false)]
	[DebuggerNonUserCode]
	public bool Discontinued
	{
	    get { return _Discontinued; }
	    set { _Discontinued = value; IsModified = true; }
	}
	
#endregion
	
	#region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
	//TODO: move this logic our of user code, into a generated class
	public override int GetHashCode()
	{
		return _ProductID.GetHashCode();
	}
	public override bool Equals(object obj)
	{
		Products o2 = obj as Products;
		if(o2==null)
			return false;
		return _ProductID == o2._ProductID;
	}
	#endregion

	
	

	public bool IsModified { get; set; }
}



[Table(Name = "Orders")]
public partial class Orders : IModified
{
	
	protected int _OrderID;
	protected string _CustomerID;
	protected int? _EmployeeID;
	protected DateTime? _OrderDate;
	protected DateTime? _RequiredDate;
	protected DateTime? _ShippedDate;
	protected int? _ShipVia;
	protected decimal? _Freight;
	protected string _ShipName;
	protected string _ShipAddress;
	protected string _ShipCity;
	protected string _ShipRegion;
	protected string _ShipPostalCode;
	protected string _ShipCountry;

	
	#region costructors
	public Orders()
	{
	}
	public Orders(int OrderID,string CustomerID,int? EmployeeID,DateTime? OrderDate,DateTime? RequiredDate,DateTime? ShippedDate,int? ShipVia,decimal? Freight,string ShipName,string ShipAddress,string ShipCity,string ShipRegion,string ShipPostalCode,string ShipCountry)
	{
	    this._OrderID = OrderID;
	this._CustomerID = CustomerID;
	this._EmployeeID = EmployeeID;
	this._OrderDate = OrderDate;
	this._RequiredDate = RequiredDate;
	this._ShippedDate = ShippedDate;
	this._ShipVia = ShipVia;
	this._Freight = Freight;
	this._ShipName = ShipName;
	this._ShipAddress = ShipAddress;
	this._ShipCity = ShipCity;
	this._ShipRegion = ShipRegion;
	this._ShipPostalCode = ShipPostalCode;
	this._ShipCountry = ShipCountry;
	}
	#endregion
	

	#region properties - accessors

	[Column(Storage = "_OrderID", Name = "OrderID", DbType = "INTEGER", IsPrimaryKey = true)]
	[DebuggerNonUserCode]
	public int OrderID
	{
	    get { return _OrderID; }
	    set { _OrderID = value; IsModified = true; }
	}
	

	[Column(Storage = "_CustomerID", Name = "CustomerID", DbType = "VARCHAR(5)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string CustomerID
	{
	    get { return _CustomerID; }
	    set { _CustomerID = value; IsModified = true; }
	}
	

	[Column(Storage = "_EmployeeID", Name = "EmployeeID", DbType = "INTEGER", CanBeNull = true)]
	[DebuggerNonUserCode]
	public int? EmployeeID
	{
	    get { return _EmployeeID; }
	    set { _EmployeeID = value; IsModified = true; }
	}
	

	[Column(Storage = "_OrderDate", Name = "OrderDate", DbType = "DATETIME", CanBeNull = true)]
	[DebuggerNonUserCode]
	public DateTime? OrderDate
	{
	    get { return _OrderDate; }
	    set { _OrderDate = value; IsModified = true; }
	}
	

	[Column(Storage = "_RequiredDate", Name = "RequiredDate", DbType = "DATETIME", CanBeNull = true)]
	[DebuggerNonUserCode]
	public DateTime? RequiredDate
	{
	    get { return _RequiredDate; }
	    set { _RequiredDate = value; IsModified = true; }
	}
	

	[Column(Storage = "_ShippedDate", Name = "ShippedDate", DbType = "DATETIME", CanBeNull = true)]
	[DebuggerNonUserCode]
	public DateTime? ShippedDate
	{
	    get { return _ShippedDate; }
	    set { _ShippedDate = value; IsModified = true; }
	}
	

	[Column(Storage = "_ShipVia", Name = "ShipVia", DbType = "INT", CanBeNull = true)]
	[DebuggerNonUserCode]
	public int? ShipVia
	{
	    get { return _ShipVia; }
	    set { _ShipVia = value; IsModified = true; }
	}
	

	[Column(Storage = "_Freight", Name = "Freight", DbType = "DECIMAL", CanBeNull = true)]
	[DebuggerNonUserCode]
	public decimal? Freight
	{
	    get { return _Freight; }
	    set { _Freight = value; IsModified = true; }
	}
	

	[Column(Storage = "_ShipName", Name = "ShipName", DbType = "VARCHAR(40)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string ShipName
	{
	    get { return _ShipName; }
	    set { _ShipName = value; IsModified = true; }
	}
	

	[Column(Storage = "_ShipAddress", Name = "ShipAddress", DbType = "VARCHAR(60)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string ShipAddress
	{
	    get { return _ShipAddress; }
	    set { _ShipAddress = value; IsModified = true; }
	}
	

	[Column(Storage = "_ShipCity", Name = "ShipCity", DbType = "VARCHAR(15)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string ShipCity
	{
	    get { return _ShipCity; }
	    set { _ShipCity = value; IsModified = true; }
	}
	

	[Column(Storage = "_ShipRegion", Name = "ShipRegion", DbType = "VARCHAR(15)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string ShipRegion
	{
	    get { return _ShipRegion; }
	    set { _ShipRegion = value; IsModified = true; }
	}
	

	[Column(Storage = "_ShipPostalCode", Name = "ShipPostalCode", DbType = "VARCHAR(10)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string ShipPostalCode
	{
	    get { return _ShipPostalCode; }
	    set { _ShipPostalCode = value; IsModified = true; }
	}
	

	[Column(Storage = "_ShipCountry", Name = "ShipCountry", DbType = "VARCHAR(15)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string ShipCountry
	{
	    get { return _ShipCountry; }
	    set { _ShipCountry = value; IsModified = true; }
	}
	
#endregion
	
	#region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
	//TODO: move this logic our of user code, into a generated class
	public override int GetHashCode()
	{
		return _OrderID.GetHashCode();
	}
	public override bool Equals(object obj)
	{
		Orders o2 = obj as Orders;
		if(o2==null)
			return false;
		return _OrderID == o2._OrderID;
	}
	#endregion

	
	

	public bool IsModified { get; set; }
}



[Table(Name = "Territories")]
public partial class Territories : IModified
{
	
	protected string _TerritoryID;
	protected string _TerritoryDescription;
	protected int _RegionID;

	
	#region costructors
	public Territories()
	{
	}
	public Territories(string TerritoryID,string TerritoryDescription,int RegionID)
	{
	    this._TerritoryID = TerritoryID;
	this._TerritoryDescription = TerritoryDescription;
	this._RegionID = RegionID;
	}
	#endregion
	

	#region properties - accessors

	[Column(Storage = "_TerritoryID", Name = "TerritoryID", DbType = "VARCHAR(20)", IsPrimaryKey = true)]
	[DebuggerNonUserCode]
	public string TerritoryID
	{
	    get { return _TerritoryID; }
	    set { _TerritoryID = value; IsModified = true; }
	}
	

	[Column(Storage = "_TerritoryDescription", Name = "TerritoryDescription", DbType = "VARCHAR(50)", CanBeNull = false)]
	[DebuggerNonUserCode]
	public string TerritoryDescription
	{
	    get { return _TerritoryDescription; }
	    set { _TerritoryDescription = value; IsModified = true; }
	}
	

	[Column(Storage = "_RegionID", Name = "RegionID", DbType = "INTEGER", CanBeNull = false)]
	[DebuggerNonUserCode]
	public int RegionID
	{
	    get { return _RegionID; }
	    set { _RegionID = value; IsModified = true; }
	}
	
#endregion
	
	#region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
	//TODO: move this logic our of user code, into a generated class
	public override int GetHashCode()
	{
		return (_TerritoryID == null ? 0 : _TerritoryID.GetHashCode());
	}
	public override bool Equals(object obj)
	{
		Territories o2 = obj as Territories;
		if(o2==null)
			return false;
		return object.Equals(_TerritoryID, o2._TerritoryID);
	}
	#endregion

	
	

	public bool IsModified { get; set; }
}



[Table(Name = "Suppliers")]
public partial class Suppliers : IModified
{
	
	protected int _SupplierID;
	protected string _CompanyName;
	protected string _ContactName;
	protected string _ContactTitle;
	protected string _Address;
	protected string _City;
	protected string _Region;
	protected string _PostalCode;
	protected string _Country;
	protected string _Phone;
	protected string _Fax;

	
	#region costructors
	public Suppliers()
	{
	}
	public Suppliers(int SupplierID,string CompanyName,string ContactName,string ContactTitle,string Address,string City,string Region,string PostalCode,string Country,string Phone,string Fax)
	{
	    this._SupplierID = SupplierID;
	this._CompanyName = CompanyName;
	this._ContactName = ContactName;
	this._ContactTitle = ContactTitle;
	this._Address = Address;
	this._City = City;
	this._Region = Region;
	this._PostalCode = PostalCode;
	this._Country = Country;
	this._Phone = Phone;
	this._Fax = Fax;
	}
	#endregion
	

	#region properties - accessors

	[Column(Storage = "_SupplierID", Name = "SupplierID", DbType = "INTEGER", IsPrimaryKey = true)]
	[DebuggerNonUserCode]
	public int SupplierID
	{
	    get { return _SupplierID; }
	    set { _SupplierID = value; IsModified = true; }
	}
	

	[Column(Storage = "_CompanyName", Name = "CompanyName", DbType = "VARCHAR(40)", CanBeNull = false)]
	[DebuggerNonUserCode]
	public string CompanyName
	{
	    get { return _CompanyName; }
	    set { _CompanyName = value; IsModified = true; }
	}
	

	[Column(Storage = "_ContactName", Name = "ContactName", DbType = "VARCHAR(30)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string ContactName
	{
	    get { return _ContactName; }
	    set { _ContactName = value; IsModified = true; }
	}
	

	[Column(Storage = "_ContactTitle", Name = "ContactTitle", DbType = "VARCHAR(30)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string ContactTitle
	{
	    get { return _ContactTitle; }
	    set { _ContactTitle = value; IsModified = true; }
	}
	

	[Column(Storage = "_Address", Name = "Address", DbType = "VARCHAR(60)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Address
	{
	    get { return _Address; }
	    set { _Address = value; IsModified = true; }
	}
	

	[Column(Storage = "_City", Name = "City", DbType = "VARCHAR(15)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string City
	{
	    get { return _City; }
	    set { _City = value; IsModified = true; }
	}
	

	[Column(Storage = "_Region", Name = "Region", DbType = "VARCHAR(15)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Region
	{
	    get { return _Region; }
	    set { _Region = value; IsModified = true; }
	}
	

	[Column(Storage = "_PostalCode", Name = "PostalCode", DbType = "VARCHAR(10)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string PostalCode
	{
	    get { return _PostalCode; }
	    set { _PostalCode = value; IsModified = true; }
	}
	

	[Column(Storage = "_Country", Name = "Country", DbType = "VARCHAR(15)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Country
	{
	    get { return _Country; }
	    set { _Country = value; IsModified = true; }
	}
	

	[Column(Storage = "_Phone", Name = "Phone", DbType = "VARCHAR(24)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Phone
	{
	    get { return _Phone; }
	    set { _Phone = value; IsModified = true; }
	}
	

	[Column(Storage = "_Fax", Name = "Fax", DbType = "VARCHAR(24)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Fax
	{
	    get { return _Fax; }
	    set { _Fax = value; IsModified = true; }
	}
	
#endregion
	
	#region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
	//TODO: move this logic our of user code, into a generated class
	public override int GetHashCode()
	{
		return _SupplierID.GetHashCode();
	}
	public override bool Equals(object obj)
	{
		Suppliers o2 = obj as Suppliers;
		if(o2==null)
			return false;
		return _SupplierID == o2._SupplierID;
	}
	#endregion

	
	

	public bool IsModified { get; set; }
}



[Table(Name = "Shippers")]
public partial class Shippers : IModified
{
	
	protected int _ShipperID;
	protected string _CompanyName;
	protected string _Phone;

	
	#region costructors
	public Shippers()
	{
	}
	public Shippers(int ShipperID,string CompanyName,string Phone)
	{
	    this._ShipperID = ShipperID;
	this._CompanyName = CompanyName;
	this._Phone = Phone;
	}
	#endregion
	

	#region properties - accessors

	[Column(Storage = "_ShipperID", Name = "ShipperID", DbType = "INTEGER", IsPrimaryKey = true)]
	[DebuggerNonUserCode]
	public int ShipperID
	{
	    get { return _ShipperID; }
	    set { _ShipperID = value; IsModified = true; }
	}
	

	[Column(Storage = "_CompanyName", Name = "CompanyName", DbType = "VARCHAR(40)", CanBeNull = false)]
	[DebuggerNonUserCode]
	public string CompanyName
	{
	    get { return _CompanyName; }
	    set { _CompanyName = value; IsModified = true; }
	}
	

	[Column(Storage = "_Phone", Name = "Phone", DbType = "VARCHAR(24)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Phone
	{
	    get { return _Phone; }
	    set { _Phone = value; IsModified = true; }
	}
	
#endregion
	
	#region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
	//TODO: move this logic our of user code, into a generated class
	public override int GetHashCode()
	{
		return _ShipperID.GetHashCode();
	}
	public override bool Equals(object obj)
	{
		Shippers o2 = obj as Shippers;
		if(o2==null)
			return false;
		return _ShipperID == o2._ShipperID;
	}
	#endregion

	
	

	public bool IsModified { get; set; }
}



[Table(Name = "Customers")]
public partial class Customers : IModified
{
	
	protected string _CustomerID;
	protected string _CompanyName;
	protected string _ContactName;
	protected string _ContactTitle;
	protected string _Address;
	protected string _City;
	protected string _Region;
	protected string _PostalCode;
	protected string _Country;
	protected string _Phone;
	protected string _Fax;

	
	#region costructors
	public Customers()
	{
	}
	public Customers(string CustomerID,string CompanyName,string ContactName,string ContactTitle,string Address,string City,string Region,string PostalCode,string Country,string Phone,string Fax)
	{
	    this._CustomerID = CustomerID;
	this._CompanyName = CompanyName;
	this._ContactName = ContactName;
	this._ContactTitle = ContactTitle;
	this._Address = Address;
	this._City = City;
	this._Region = Region;
	this._PostalCode = PostalCode;
	this._Country = Country;
	this._Phone = Phone;
	this._Fax = Fax;
	}
	#endregion
	

	#region properties - accessors

	[Column(Storage = "_CustomerID", Name = "CustomerID", DbType = "VARCHAR(5)", IsPrimaryKey = true)]
	[DebuggerNonUserCode]
	public string CustomerID
	{
	    get { return _CustomerID; }
	    set { _CustomerID = value; IsModified = true; }
	}
	

	[Column(Storage = "_CompanyName", Name = "CompanyName", DbType = "VARCHAR(40)", CanBeNull = false)]
	[DebuggerNonUserCode]
	public string CompanyName
	{
	    get { return _CompanyName; }
	    set { _CompanyName = value; IsModified = true; }
	}
	

	[Column(Storage = "_ContactName", Name = "ContactName", DbType = "VARCHAR(30)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string ContactName
	{
	    get { return _ContactName; }
	    set { _ContactName = value; IsModified = true; }
	}
	

	[Column(Storage = "_ContactTitle", Name = "ContactTitle", DbType = "VARCHAR(30)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string ContactTitle
	{
	    get { return _ContactTitle; }
	    set { _ContactTitle = value; IsModified = true; }
	}
	

	[Column(Storage = "_Address", Name = "Address", DbType = "VARCHAR(60)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Address
	{
	    get { return _Address; }
	    set { _Address = value; IsModified = true; }
	}
	

	[Column(Storage = "_City", Name = "City", DbType = "VARCHAR(15)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string City
	{
	    get { return _City; }
	    set { _City = value; IsModified = true; }
	}
	

	[Column(Storage = "_Region", Name = "Region", DbType = "VARCHAR(15)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Region
	{
	    get { return _Region; }
	    set { _Region = value; IsModified = true; }
	}
	

	[Column(Storage = "_PostalCode", Name = "PostalCode", DbType = "VARCHAR(10)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string PostalCode
	{
	    get { return _PostalCode; }
	    set { _PostalCode = value; IsModified = true; }
	}
	

	[Column(Storage = "_Country", Name = "Country", DbType = "VARCHAR(15)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Country
	{
	    get { return _Country; }
	    set { _Country = value; IsModified = true; }
	}
	

	[Column(Storage = "_Phone", Name = "Phone", DbType = "VARCHAR(24)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Phone
	{
	    get { return _Phone; }
	    set { _Phone = value; IsModified = true; }
	}
	

	[Column(Storage = "_Fax", Name = "Fax", DbType = "VARCHAR(24)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Fax
	{
	    get { return _Fax; }
	    set { _Fax = value; IsModified = true; }
	}
	
#endregion
	
	#region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
	//TODO: move this logic our of user code, into a generated class
	public override int GetHashCode()
	{
		return (_CustomerID == null ? 0 : _CustomerID.GetHashCode());
	}
	public override bool Equals(object obj)
	{
		Customers o2 = obj as Customers;
		if(o2==null)
			return false;
		return object.Equals(_CustomerID, o2._CustomerID);
	}
	#endregion

	
	

	public bool IsModified { get; set; }
}



[Table(Name = "Categories")]
public partial class Categories : IModified
{
	
	protected int _CategoryID;
	protected string _CategoryName;
	protected string _Description;
	protected byte[] _Picture;

	
	#region costructors
	public Categories()
	{
	}
	public Categories(int CategoryID,string CategoryName,string Description,byte[] Picture)
	{
	    this._CategoryID = CategoryID;
	this._CategoryName = CategoryName;
	this._Description = Description;
	this._Picture = Picture;
	}
	#endregion
	

	#region properties - accessors

	[Column(Storage = "_CategoryID", Name = "CategoryID", DbType = "INTEGER", IsPrimaryKey = true)]
	[DebuggerNonUserCode]
	public int CategoryID
	{
	    get { return _CategoryID; }
	    set { _CategoryID = value; IsModified = true; }
	}
	

	[Column(Storage = "_CategoryName", Name = "CategoryName", DbType = "VARCHAR(15)", CanBeNull = false)]
	[DebuggerNonUserCode]
	public string CategoryName
	{
	    get { return _CategoryName; }
	    set { _CategoryName = value; IsModified = true; }
	}
	

	[Column(Storage = "_Description", Name = "Description", DbType = "TEXT", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Description
	{
	    get { return _Description; }
	    set { _Description = value; IsModified = true; }
	}
	

	[Column(Storage = "_Picture", Name = "Picture", DbType = "BLOB", CanBeNull = true)]
	[DebuggerNonUserCode]
	public byte[] Picture
	{
	    get { return _Picture; }
	    set { _Picture = value; IsModified = true; }
	}
	
#endregion
	
	#region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
	//TODO: move this logic our of user code, into a generated class
	public override int GetHashCode()
	{
		return _CategoryID.GetHashCode();
	}
	public override bool Equals(object obj)
	{
		Categories o2 = obj as Categories;
		if(o2==null)
			return false;
		return _CategoryID == o2._CategoryID;
	}
	#endregion

	
	

	public bool IsModified { get; set; }
}



[Table(Name = "AllTypes")]
public partial class Alltypes : IModified
{
	
	protected int _int;
	protected int? _intN;
	protected double _double;
	protected double? _doubleN;
	protected decimal _decimal;
	protected decimal? _decimalN;
	protected byte[] _blob;
	protected byte[] _blobN;
	protected bool _boolean;
	protected bool? _boolN;
	protected bool _byte;
	protected bool? _byteN;
	protected DateTime _DateTime;
	protected DateTime? _DateTimeN;
	protected float _float;
	protected float? _floatN;
	protected string _char;
	protected string _charN;
	protected string _text;
	protected string _textN;
	protected short _short;
	protected short? _shortN;
	protected decimal _numeric;
	protected decimal? _numericN;
	protected float _real;
	protected float? _realN;
	protected short _smallInt;
	protected short? _smallIntN;
	protected DbLinq_EnumTest _DbLinq_EnumTest;

	
	#region costructors
	public Alltypes()
	{
	}
	public Alltypes(int int_,int? intN,double double_,double? doubleN,decimal decimal_,decimal? decimalN,byte[] blob,byte[] blobN,bool boolean,bool? boolN,bool byte_,bool? byteN,DateTime DateTime_,DateTime? DateTimeN,float float_,float? floatN,string char_,string charN,string text,string textN,short short_,short? shortN,decimal numeric,decimal? numericN,float real,float? realN,short smallInt,short? smallIntN,DbLinq_EnumTest DbLinq_EnumTest)
	{
	    this._int = int_;
	this._intN = intN;
	this._double = double_;
	this._doubleN = doubleN;
	this._decimal = decimal_;
	this._decimalN = decimalN;
	this._blob = blob;
	this._blobN = blobN;
	this._boolean = boolean;
	this._boolN = boolN;
	this._byte = byte_;
	this._byteN = byteN;
	this._DateTime = DateTime_;
	this._DateTimeN = DateTimeN;
	this._float = float_;
	this._floatN = floatN;
	this._char = char_;
	this._charN = charN;
	this._text = text;
	this._textN = textN;
	this._short = short_;
	this._shortN = shortN;
	this._numeric = numeric;
	this._numericN = numericN;
	this._real = real;
	this._realN = realN;
	this._smallInt = smallInt;
	this._smallIntN = smallIntN;
	this._DbLinq_EnumTest = DbLinq_EnumTest;
	}
	#endregion
	

	#region properties - accessors

	[Column(Storage = "_int", Name = "int", DbType = "INTEGER UNSIGNED", IsPrimaryKey = true)]
	[DebuggerNonUserCode]
	public int int_
	{
	    get { return _int; }
	    set { _int = value; IsModified = true; }
	}
	

	[Column(Storage = "_intN", Name = "intN", DbType = "INTEGER UNSIGNED", CanBeNull = true)]
	[DebuggerNonUserCode]
	public int? intN
	{
	    get { return _intN; }
	    set { _intN = value; IsModified = true; }
	}
	

	[Column(Storage = "_double", Name = "double", DbType = "DOUBLE", CanBeNull = false)]
	[DebuggerNonUserCode]
	public double double_
	{
	    get { return _double; }
	    set { _double = value; IsModified = true; }
	}
	

	[Column(Storage = "_doubleN", Name = "doubleN", DbType = "DOUBLE", CanBeNull = true)]
	[DebuggerNonUserCode]
	public double? doubleN
	{
	    get { return _doubleN; }
	    set { _doubleN = value; IsModified = true; }
	}
	

	[Column(Storage = "_decimal", Name = "decimal", DbType = "DECIMAL", CanBeNull = false)]
	[DebuggerNonUserCode]
	public decimal decimal_
	{
	    get { return _decimal; }
	    set { _decimal = value; IsModified = true; }
	}
	

	[Column(Storage = "_decimalN", Name = "decimalN", DbType = "DECIMAL", CanBeNull = true)]
	[DebuggerNonUserCode]
	public decimal? decimalN
	{
	    get { return _decimalN; }
	    set { _decimalN = value; IsModified = true; }
	}
	

	[Column(Storage = "_blob", Name = "blob", DbType = "BLOB", CanBeNull = false)]
	[DebuggerNonUserCode]
	public byte[] blob
	{
	    get { return _blob; }
	    set { _blob = value; IsModified = true; }
	}
	

	[Column(Storage = "_blobN", Name = "blobN", DbType = "BLOB", CanBeNull = true)]
	[DebuggerNonUserCode]
	public byte[] blobN
	{
	    get { return _blobN; }
	    set { _blobN = value; IsModified = true; }
	}
	

	[Column(Storage = "_boolean", Name = "boolean", DbType = "BOOLEAN", CanBeNull = false)]
	[DebuggerNonUserCode]
	public bool boolean
	{
	    get { return _boolean; }
	    set { _boolean = value; IsModified = true; }
	}
	

	[Column(Storage = "_boolN", Name = "boolN", DbType = "BOOLEAN", CanBeNull = true)]
	[DebuggerNonUserCode]
	public bool? boolN
	{
	    get { return _boolN; }
	    set { _boolN = value; IsModified = true; }
	}
	

	[Column(Storage = "_byte", Name = "byte", DbType = "TINYINT UNSIGNED", CanBeNull = false)]
	[DebuggerNonUserCode]
	public bool byte_
	{
	    get { return _byte; }
	    set { _byte = value; IsModified = true; }
	}
	

	[Column(Storage = "_byteN", Name = "byteN", DbType = "TINYINT UNSIGNED", CanBeNull = true)]
	[DebuggerNonUserCode]
	public bool? byteN
	{
	    get { return _byteN; }
	    set { _byteN = value; IsModified = true; }
	}
	

	[Column(Storage = "_DateTime", Name = "DateTime", DbType = "DATETIME", CanBeNull = false)]
	[DebuggerNonUserCode]
	public DateTime DateTime_
	{
	    get { return _DateTime; }
	    set { _DateTime = value; IsModified = true; }
	}
	

	[Column(Storage = "_DateTimeN", Name = "DateTimeN", DbType = "DATETIME", CanBeNull = true)]
	[DebuggerNonUserCode]
	public DateTime? DateTimeN
	{
	    get { return _DateTimeN; }
	    set { _DateTimeN = value; IsModified = true; }
	}
	

	[Column(Storage = "_float", Name = "float", DbType = "FLOAT", CanBeNull = false)]
	[DebuggerNonUserCode]
	public float float_
	{
	    get { return _float; }
	    set { _float = value; IsModified = true; }
	}
	

	[Column(Storage = "_floatN", Name = "floatN", DbType = "FLOAT", CanBeNull = true)]
	[DebuggerNonUserCode]
	public float? floatN
	{
	    get { return _floatN; }
	    set { _floatN = value; IsModified = true; }
	}
	

	[Column(Storage = "_char", Name = "char", DbType = "CHAR", CanBeNull = false)]
	[DebuggerNonUserCode]
	public string char_
	{
	    get { return _char; }
	    set { _char = value; IsModified = true; }
	}
	

	[Column(Storage = "_charN", Name = "charN", DbType = "CHAR", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string charN
	{
	    get { return _charN; }
	    set { _charN = value; IsModified = true; }
	}
	

	[Column(Storage = "_text", Name = "text", DbType = "TEXT", CanBeNull = false)]
	[DebuggerNonUserCode]
	public string text
	{
	    get { return _text; }
	    set { _text = value; IsModified = true; }
	}
	

	[Column(Storage = "_textN", Name = "textN", DbType = "TEXT", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string textN
	{
	    get { return _textN; }
	    set { _textN = value; IsModified = true; }
	}
	

	[Column(Storage = "_short", Name = "short", DbType = "MEDIUMINT UNSIGNED", CanBeNull = false)]
	[DebuggerNonUserCode]
	public short short_
	{
	    get { return _short; }
	    set { _short = value; IsModified = true; }
	}
	

	[Column(Storage = "_shortN", Name = "shortN", DbType = "MEDIUMINT UNSIGNED", CanBeNull = true)]
	[DebuggerNonUserCode]
	public short? shortN
	{
	    get { return _shortN; }
	    set { _shortN = value; IsModified = true; }
	}
	

	[Column(Storage = "_numeric", Name = "numeric", DbType = "NUMERIC", CanBeNull = false)]
	[DebuggerNonUserCode]
	public decimal numeric
	{
	    get { return _numeric; }
	    set { _numeric = value; IsModified = true; }
	}
	

	[Column(Storage = "_numericN", Name = "numericN", DbType = "NUMERIC", CanBeNull = true)]
	[DebuggerNonUserCode]
	public decimal? numericN
	{
	    get { return _numericN; }
	    set { _numericN = value; IsModified = true; }
	}
	

	[Column(Storage = "_real", Name = "real", DbType = "REAL", CanBeNull = false)]
	[DebuggerNonUserCode]
	public float real
	{
	    get { return _real; }
	    set { _real = value; IsModified = true; }
	}
	

	[Column(Storage = "_realN", Name = "realN", DbType = "REAL", CanBeNull = true)]
	[DebuggerNonUserCode]
	public float? realN
	{
	    get { return _realN; }
	    set { _realN = value; IsModified = true; }
	}
	

	[Column(Storage = "_smallInt", Name = "smallInt", DbType = "SMALLINT UNSIGNED", CanBeNull = false)]
	[DebuggerNonUserCode]
	public short smallInt
	{
	    get { return _smallInt; }
	    set { _smallInt = value; IsModified = true; }
	}
	

	[Column(Storage = "_smallIntN", Name = "smallIntN", DbType = "SMALLINT UNSIGNED", CanBeNull = true)]
	[DebuggerNonUserCode]
	public short? smallIntN
	{
	    get { return _smallIntN; }
	    set { _smallIntN = value; IsModified = true; }
	}
	

	[Column(Storage = "_DbLinq_EnumTest", Name = "DbLinq_EnumTest", DbType = "SMALLINT UNSIGNED", CanBeNull = false)]
	[DebuggerNonUserCode]
	public DbLinq_EnumTest DbLinq_EnumTest
	{
	    get { return _DbLinq_EnumTest; }
	    set { _DbLinq_EnumTest = value; IsModified = true; }
	}
	
#endregion
	
	#region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
	//TODO: move this logic our of user code, into a generated class
	public override int GetHashCode()
	{
		return _int.GetHashCode();
	}
	public override bool Equals(object obj)
	{
		Alltypes o2 = obj as Alltypes;
		if(o2==null)
			return false;
		return _int == o2._int;
	}
	#endregion

	
	

	public bool IsModified { get; set; }
}



[Table(Name = "OrderDetails")]
public partial class Orderdetails : IModified
{
	
	protected int _OrderID;
	protected int _ProductID;
	protected decimal _UnitPrice;
	protected short _Quantity;
	protected float _Discount;

	
	#region costructors
	public Orderdetails()
	{
	}
	public Orderdetails(int OrderID,int ProductID,decimal UnitPrice,short Quantity,float Discount)
	{
	    this._OrderID = OrderID;
	this._ProductID = ProductID;
	this._UnitPrice = UnitPrice;
	this._Quantity = Quantity;
	this._Discount = Discount;
	}
	#endregion
	

	#region properties - accessors

	[Column(Storage = "_OrderID", Name = "OrderID", DbType = "INTEGER", IsPrimaryKey = true)]
	[DebuggerNonUserCode]
	public int OrderID
	{
	    get { return _OrderID; }
	    set { _OrderID = value; IsModified = true; }
	}
	

	[Column(Storage = "_ProductID", Name = "ProductID", DbType = "INTEGER", IsPrimaryKey = true)]
	[DebuggerNonUserCode]
	public int ProductID
	{
	    get { return _ProductID; }
	    set { _ProductID = value; IsModified = true; }
	}
	

	[Column(Storage = "_UnitPrice", Name = "UnitPrice", DbType = "DECIMAL", CanBeNull = false)]
	[DebuggerNonUserCode]
	public decimal UnitPrice
	{
	    get { return _UnitPrice; }
	    set { _UnitPrice = value; IsModified = true; }
	}
	

	[Column(Storage = "_Quantity", Name = "Quantity", DbType = "SMALLINT", CanBeNull = false)]
	[DebuggerNonUserCode]
	public short Quantity
	{
	    get { return _Quantity; }
	    set { _Quantity = value; IsModified = true; }
	}
	

	[Column(Storage = "_Discount", Name = "Discount", DbType = "FLOAT", CanBeNull = false)]
	[DebuggerNonUserCode]
	public float Discount
	{
	    get { return _Discount; }
	    set { _Discount = value; IsModified = true; }
	}
	
#endregion
	
	#region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
	//TODO: move this logic our of user code, into a generated class
	public override int GetHashCode()
	{
		return _OrderID.GetHashCode() ^ _ProductID.GetHashCode();
	}
	public override bool Equals(object obj)
	{
		Orderdetails o2 = obj as Orderdetails;
		if(o2==null)
			return false;
		return _OrderID == o2._OrderID && _ProductID == o2._ProductID;
	}
	#endregion

	
	

	public bool IsModified { get; set; }
}



[Table(Name = "Employees")]
public partial class Employees : IModified
{
	
	protected int _EmployeeID;
	protected string _LastName;
	protected string _FirstName;
	protected string _Title;
	protected DateTime? _BirthDate;
	protected DateTime? _HireDate;
	protected string _Address;
	protected string _City;
	protected string _Region;
	protected string _PostalCode;
	protected string _Country;
	protected string _HomePhone;
	protected byte[] _Photo;
	protected string _Notes;
	protected int? _ReportsTo;

	
	#region costructors
	public Employees()
	{
	}
	public Employees(int EmployeeID,string LastName,string FirstName,string Title,DateTime? BirthDate,DateTime? HireDate,string Address,string City,string Region,string PostalCode,string Country,string HomePhone,byte[] Photo,string Notes,int? ReportsTo)
	{
	    this._EmployeeID = EmployeeID;
	this._LastName = LastName;
	this._FirstName = FirstName;
	this._Title = Title;
	this._BirthDate = BirthDate;
	this._HireDate = HireDate;
	this._Address = Address;
	this._City = City;
	this._Region = Region;
	this._PostalCode = PostalCode;
	this._Country = Country;
	this._HomePhone = HomePhone;
	this._Photo = Photo;
	this._Notes = Notes;
	this._ReportsTo = ReportsTo;
	}
	#endregion
	

	#region properties - accessors

	[Column(Storage = "_EmployeeID", Name = "EmployeeID", DbType = "INTEGER", IsPrimaryKey = true)]
	[DebuggerNonUserCode]
	public int EmployeeID
	{
	    get { return _EmployeeID; }
	    set { _EmployeeID = value; IsModified = true; }
	}
	

	[Column(Storage = "_LastName", Name = "LastName", DbType = "VARCHAR(20)", CanBeNull = false)]
	[DebuggerNonUserCode]
	public string LastName
	{
	    get { return _LastName; }
	    set { _LastName = value; IsModified = true; }
	}
	

	[Column(Storage = "_FirstName", Name = "FirstName", DbType = "VARCHAR(10)", CanBeNull = false)]
	[DebuggerNonUserCode]
	public string FirstName
	{
	    get { return _FirstName; }
	    set { _FirstName = value; IsModified = true; }
	}
	

	[Column(Storage = "_Title", Name = "Title", DbType = "VARCHAR(30)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Title
	{
	    get { return _Title; }
	    set { _Title = value; IsModified = true; }
	}
	

	[Column(Storage = "_BirthDate", Name = "BirthDate", DbType = "DATETIME", CanBeNull = true)]
	[DebuggerNonUserCode]
	public DateTime? BirthDate
	{
	    get { return _BirthDate; }
	    set { _BirthDate = value; IsModified = true; }
	}
	

	[Column(Storage = "_HireDate", Name = "HireDate", DbType = "DATETIME", CanBeNull = true)]
	[DebuggerNonUserCode]
	public DateTime? HireDate
	{
	    get { return _HireDate; }
	    set { _HireDate = value; IsModified = true; }
	}
	

	[Column(Storage = "_Address", Name = "Address", DbType = "VARCHAR(60)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Address
	{
	    get { return _Address; }
	    set { _Address = value; IsModified = true; }
	}
	

	[Column(Storage = "_City", Name = "City", DbType = "VARCHAR(15)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string City
	{
	    get { return _City; }
	    set { _City = value; IsModified = true; }
	}
	

	[Column(Storage = "_Region", Name = "Region", DbType = "VARCHAR(15)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Region
	{
	    get { return _Region; }
	    set { _Region = value; IsModified = true; }
	}
	

	[Column(Storage = "_PostalCode", Name = "PostalCode", DbType = "VARCHAR(10)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string PostalCode
	{
	    get { return _PostalCode; }
	    set { _PostalCode = value; IsModified = true; }
	}
	

	[Column(Storage = "_Country", Name = "Country", DbType = "VARCHAR(15)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Country
	{
	    get { return _Country; }
	    set { _Country = value; IsModified = true; }
	}
	

	[Column(Storage = "_HomePhone", Name = "HomePhone", DbType = "VARCHAR(24)", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string HomePhone
	{
	    get { return _HomePhone; }
	    set { _HomePhone = value; IsModified = true; }
	}
	

	[Column(Storage = "_Photo", Name = "Photo", DbType = "BLOB", CanBeNull = true)]
	[DebuggerNonUserCode]
	public byte[] Photo
	{
	    get { return _Photo; }
	    set { _Photo = value; IsModified = true; }
	}
	

	[Column(Storage = "_Notes", Name = "Notes", DbType = "TEXT", CanBeNull = true)]
	[DebuggerNonUserCode]
	public string Notes
	{
	    get { return _Notes; }
	    set { _Notes = value; IsModified = true; }
	}
	

	[Column(Storage = "_ReportsTo", Name = "ReportsTo", DbType = "INTEGER", CanBeNull = true)]
	[DebuggerNonUserCode]
	public int? ReportsTo
	{
	    get { return _ReportsTo; }
	    set { _ReportsTo = value; IsModified = true; }
	}
	
#endregion
	
	#region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
	//TODO: move this logic our of user code, into a generated class
	public override int GetHashCode()
	{
		return _EmployeeID.GetHashCode();
	}
	public override bool Equals(object obj)
	{
		Employees o2 = obj as Employees;
		if(o2==null)
			return false;
		return _EmployeeID == o2._EmployeeID;
	}
	#endregion

	
	

	public bool IsModified { get; set; }
}



[Table(Name = "EmployeeTerritories")]
public partial class Employeeterritories : IModified
{
	
	protected int _EmployeeID;
	protected string _TerritoryID;

	
	#region costructors
	public Employeeterritories()
	{
	}
	public Employeeterritories(int EmployeeID,string TerritoryID)
	{
	    this._EmployeeID = EmployeeID;
	this._TerritoryID = TerritoryID;
	}
	#endregion
	

	#region properties - accessors

	[Column(Storage = "_EmployeeID", Name = "EmployeeID", DbType = "INTEGER", IsPrimaryKey = true)]
	[DebuggerNonUserCode]
	public int EmployeeID
	{
	    get { return _EmployeeID; }
	    set { _EmployeeID = value; IsModified = true; }
	}
	

	[Column(Storage = "_TerritoryID", Name = "TerritoryID", DbType = "VARCHAR(20)", IsPrimaryKey = true)]
	[DebuggerNonUserCode]
	public string TerritoryID
	{
	    get { return _TerritoryID; }
	    set { _TerritoryID = value; IsModified = true; }
	}
	
#endregion
	
	#region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
	//TODO: move this logic our of user code, into a generated class
	public override int GetHashCode()
	{
		return _EmployeeID.GetHashCode() ^ (_TerritoryID == null ? 0 : _TerritoryID.GetHashCode());
	}
	public override bool Equals(object obj)
	{
		Employeeterritories o2 = obj as Employeeterritories;
		if(o2==null)
			return false;
		return _EmployeeID == o2._EmployeeID && object.Equals(_TerritoryID, o2._TerritoryID);
	}
	#endregion

	
	

	public bool IsModified { get; set; }
}

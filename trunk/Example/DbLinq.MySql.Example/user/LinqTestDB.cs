//#########################################################################
//generated by MysqlMetal on 2007-Sep-27 - extracted from server localhost.
//#########################################################################

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Reflection;
using DBLinq.Linq;
using DBLinq.Linq.Mapping;

namespace Client2.user
{
    
	/// <summary>
	/// This class represents MySql database LinqTestDB.
	/// </summary>
	public partial class LinqTestDB : MContext
	{
	    public LinqTestDB(string connStr):base(connStr)
	    {
	        Alltypes = new MTable<Alltype>(this);
			Customers = new MTable<Customer>(this);
			Orders = new MTable<Order>(this);
			Products = new MTable<Product>(this);
	    }
	
	    //these fields represent tables in database and are
	    //ordered - parent tables first, child tables next. Do not change the order.
	    public readonly MTable<Alltype> Alltypes;
		public readonly MTable<Customer> Customers;
		public readonly MTable<Order> Orders;
		public readonly MTable<Product> Products;

        [FunctionEx(Name = "hello", ProcedureOrFunction="FUNCTION")]
        public string hello([Parameter(Name = "s", DbType = "CHAR(20)")] string s)
        {
            IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), s);
            return result.ReturnValue as string;
        }

        [FunctionEx(Name = "hello0", ProcedureOrFunction = "FUNCTION")]
        public string hello0()
        {
            IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return result.ReturnValue as string;
        }

	}
	
	
	
	[Table(Name="alltypes")]
	public partial class Alltype : IModified
	{
	    bool _isModified_;
	    public bool IsModified 
	    { 
	        get { return _isModified_; } 
	        set { _isModified_ = value; } 
	    }
	
	    [DBLinq.Linq.Mapping.AutoGenId] 
		protected uint _int;
	
		protected uint? _intN;
	
		protected double _double;
	
		protected double _doubleN;
	
		protected decimal _decimal;
	
		protected decimal _decimalN;
	
		protected byte[] _blob;
	
		protected byte[] _blobN;
	
		protected bool _boolean;
	
		protected bool? _boolN;
	
		protected char _byte;
	
		protected char? _byteN;
	
		protected DateTime _DateTime;
	
		protected DateTime? _DateTimeN;
	
		protected float _float;
	
		protected float _floatN;
	
		protected string _char;
	
		protected string _charN;
	
		protected string _text;
	
		protected string _textN;
	
		protected short _short;
	
		protected short? _shortN;
	
		protected decimal _numeric;
	
		protected decimal _numericN;
	
		protected double _real;
	
		protected double _realN;
	
		protected short _smallInt;
	
		protected short? _smallIntN;
	
	    
		#region costructors
		public Alltype()
		{
		}
		public Alltype(uint int_,uint? intN,double double_,double doubleN,decimal decimal_,decimal decimalN,byte[] blob,byte[] blobN,bool boolean,bool? boolN,char byte_,char? byteN,DateTime DateTime,DateTime? DateTimeN,float float_,float floatN,string char_,string charN,string text,string textN,short short_,short? shortN,decimal numeric,decimal numericN,double real,double realN,short smallInt,short? smallIntN)
		{
		    this._int = int_;
		this._intN = intN;
		this._double = double_;
		this._doubleN = doubleN;
		this._decimal = decimal_;
		this._decimalN = decimalN;
		this._blob = blob;
		this._blobN = blobN;
		this._boolean = boolean;
		this._boolN = boolN;
		this._byte = byte_;
		this._byteN = byteN;
		this._DateTime = DateTime;
		this._DateTimeN = DateTimeN;
		this._float = float_;
		this._floatN = floatN;
		this._char = char_;
		this._charN = charN;
		this._text = text;
		this._textN = textN;
		this._short = short_;
		this._shortN = shortN;
		this._numeric = numeric;
		this._numericN = numericN;
		this._real = real;
		this._realN = realN;
		this._smallInt = smallInt;
		this._smallIntN = smallIntN;
		}
		#endregion
		
	
	    #region properties - accessors
	
		[Column(Name="int", DbType="int", IsPrimaryKey=true, IsDbGenerated=true)]
		[DebuggerNonUserCode]
		public uint Int
		{
		    get { return _int; }
		    set { _int=value; _isModified_=true; }
		}
		
	
		[Column(Name="intN", DbType="int", CanBeNull=true)]
		[DebuggerNonUserCode]
		public uint? intN
		{
		    get { return _intN; }
		    set { _intN=value; _isModified_=true; }
		}
		
	
		[Column(Name="double", DbType="double", CanBeNull=false)]
		[DebuggerNonUserCode]
		public double Double
		{
		    get { return _double; }
		    set { _double=value; _isModified_=true; }
		}
		
	
		[Column(Name="doubleN", DbType="double", CanBeNull=true)]
		[DebuggerNonUserCode]
		public double doubleN
		{
		    get { return _doubleN; }
		    set { _doubleN=value; _isModified_=true; }
		}
		
	
		[Column(Name="decimal", DbType="decimal", CanBeNull=false)]
		[DebuggerNonUserCode]
		public decimal Decimal
		{
		    get { return _decimal; }
		    set { _decimal=value; _isModified_=true; }
		}
		
	
		[Column(Name="decimalN", DbType="decimal", CanBeNull=true)]
		[DebuggerNonUserCode]
		public decimal decimalN
		{
		    get { return _decimalN; }
		    set { _decimalN=value; _isModified_=true; }
		}
		
	
		[Column(Name="blob", DbType="blob", CanBeNull=false)]
		[DebuggerNonUserCode]
		public byte[] Blob
		{
		    get { return _blob; }
		    set { _blob=value; _isModified_=true; }
		}
		
	
		[Column(Name="blobN", DbType="blob", CanBeNull=true)]
		[DebuggerNonUserCode]
		public byte[] blobN
		{
		    get { return _blobN; }
		    set { _blobN=value; _isModified_=true; }
		}
		
	
		[Column(Name="boolean", DbType="tinyint", CanBeNull=false)]
		[DebuggerNonUserCode]
		public bool Boolean
		{
		    get { return _boolean; }
		    set { _boolean=value; _isModified_=true; }
		}
		
	
		[Column(Name="boolN", DbType="tinyint", CanBeNull=true)]
		[DebuggerNonUserCode]
		public bool? boolN
		{
		    get { return _boolN; }
		    set { _boolN=value; _isModified_=true; }
		}
		
	
		[Column(Name="byte", DbType="tinyint", CanBeNull=false)]
		[DebuggerNonUserCode]
		public char Byte
		{
		    get { return _byte; }
		    set { _byte=value; _isModified_=true; }
		}
		
	
		[Column(Name="byteN", DbType="tinyint", CanBeNull=true)]
		[DebuggerNonUserCode]
		public char? byteN
		{
		    get { return _byteN; }
		    set { _byteN=value; _isModified_=true; }
		}
		
	
		[Column(Name="DateTime", DbType="datetime", CanBeNull=false)]
		[DebuggerNonUserCode]
		public DateTime DateTime
		{
		    get { return _DateTime; }
		    set { _DateTime=value; _isModified_=true; }
		}
		
	
		[Column(Name="DateTimeN", DbType="datetime", CanBeNull=true)]
		[DebuggerNonUserCode]
		public DateTime? DateTimeN
		{
		    get { return _DateTimeN; }
		    set { _DateTimeN=value; _isModified_=true; }
		}
		
	
		[Column(Name="float", DbType="float", CanBeNull=false)]
		[DebuggerNonUserCode]
		public float Float
		{
		    get { return _float; }
		    set { _float=value; _isModified_=true; }
		}
		
	
		[Column(Name="floatN", DbType="float", CanBeNull=true)]
		[DebuggerNonUserCode]
		public float floatN
		{
		    get { return _floatN; }
		    set { _floatN=value; _isModified_=true; }
		}
		
	
		[Column(Name="char", DbType="char", CanBeNull=false)]
		[DebuggerNonUserCode]
		public string Char
		{
		    get { return _char; }
		    set { _char=value; _isModified_=true; }
		}
		
	
		[Column(Name="charN", DbType="char", CanBeNull=true)]
		[DebuggerNonUserCode]
		public string charN
		{
		    get { return _charN; }
		    set { _charN=value; _isModified_=true; }
		}
		
	
		[Column(Name="text", DbType="text", CanBeNull=false)]
		[DebuggerNonUserCode]
		public string Text
		{
		    get { return _text; }
		    set { _text=value; _isModified_=true; }
		}
		
	
		[Column(Name="textN", DbType="text", CanBeNull=true)]
		[DebuggerNonUserCode]
		public string textN
		{
		    get { return _textN; }
		    set { _textN=value; _isModified_=true; }
		}
		
	
		[Column(Name="short", DbType="mediumint", CanBeNull=false)]
		[DebuggerNonUserCode]
		public short Short
		{
		    get { return _short; }
		    set { _short=value; _isModified_=true; }
		}
		
	
		[Column(Name="shortN", DbType="mediumint", CanBeNull=true)]
		[DebuggerNonUserCode]
		public short? shortN
		{
		    get { return _shortN; }
		    set { _shortN=value; _isModified_=true; }
		}
		
	
		[Column(Name="numeric", DbType="decimal", CanBeNull=false)]
		[DebuggerNonUserCode]
		public decimal Numeric
		{
		    get { return _numeric; }
		    set { _numeric=value; _isModified_=true; }
		}
		
	
		[Column(Name="numericN", DbType="decimal", CanBeNull=true)]
		[DebuggerNonUserCode]
		public decimal numericN
		{
		    get { return _numericN; }
		    set { _numericN=value; _isModified_=true; }
		}
		
	
		[Column(Name="real", DbType="double", CanBeNull=false)]
		[DebuggerNonUserCode]
		public double Real
		{
		    get { return _real; }
		    set { _real=value; _isModified_=true; }
		}
		
	
		[Column(Name="realN", DbType="double", CanBeNull=true)]
		[DebuggerNonUserCode]
		public double realN
		{
		    get { return _realN; }
		    set { _realN=value; _isModified_=true; }
		}
		
	
		[Column(Name="smallInt", DbType="smallint", CanBeNull=false)]
		[DebuggerNonUserCode]
		public short smallInt
		{
		    get { return _smallInt; }
		    set { _smallInt=value; _isModified_=true; }
		}
		
	
		[Column(Name="smallIntN", DbType="smallint", CanBeNull=true)]
		[DebuggerNonUserCode]
		public short? smallIntN
		{
		    get { return _smallIntN; }
		    set { _smallIntN=value; _isModified_=true; }
		}
		
	#endregion
	    
	    #region GetHashCode(),Equals() - uses column _int to look up objects in liveObjectMap
	    //TODO: move this logic our of user code, into a generated class
	    public override int GetHashCode()
	    {
	        return _int.GetHashCode();
	    }
	    public override bool Equals(object obj)
	    {
	        Alltype o2 = obj as Alltype;
	        if(o2==null)
	            return false;
	        return _int.Equals(o2._int);
	    }
	    #endregion
	
	    
	    
	}
	
	
	
	[Table(Name="customer")]
	public partial class Customer : IModified
	{
	    bool _isModified_;
	    public bool IsModified 
	    { 
	        get { return _isModified_; } 
	        set { _isModified_ = value; } 
	    }
	
	    [DBLinq.Linq.Mapping.AutoGenId] 
		protected uint _CustomerID;
	
		protected string _CompanyName;
	
		protected string _ContactName;
	
		protected string _City;
	
		protected string _PostalCode;
	
		protected string _Country;
	
		protected string _Phone;
	
	    
		#region costructors
		public Customer()
		{
		}
		public Customer(uint CustomerID,string CompanyName,string ContactName,string City,string PostalCode,string Country,string Phone)
		{
		    this._CustomerID = CustomerID;
		this._CompanyName = CompanyName;
		this._ContactName = ContactName;
		this._City = City;
		this._PostalCode = PostalCode;
		this._Country = Country;
		this._Phone = Phone;
		}
		#endregion
		
	
	    #region properties - accessors
	
		[Column(Name="CustomerID", DbType="int", IsPrimaryKey=true, IsDbGenerated=true)]
		[DebuggerNonUserCode]
		public uint CustomerID
		{
		    get { return _CustomerID; }
		    set { _CustomerID=value; _isModified_=true; }
		}
		
	
		[Column(Name="CompanyName", DbType="varchar", CanBeNull=false)]
		[DebuggerNonUserCode]
		public string CompanyName
		{
		    get { return _CompanyName; }
		    set { _CompanyName=value; _isModified_=true; }
		}
		
	
		[Column(Name="ContactName", DbType="varchar", CanBeNull=false)]
		[DebuggerNonUserCode]
		public string ContactName
		{
		    get { return _ContactName; }
		    set { _ContactName=value; _isModified_=true; }
		}
		
	
		[Column(Name="City", DbType="varchar", CanBeNull=false)]
		[DebuggerNonUserCode]
		public string City
		{
		    get { return _City; }
		    set { _City=value; _isModified_=true; }
		}
		
	
		[Column(Name="PostalCode", DbType="varchar", CanBeNull=false)]
		[DebuggerNonUserCode]
		public string PostalCode
		{
		    get { return _PostalCode; }
		    set { _PostalCode=value; _isModified_=true; }
		}
		
	
		[Column(Name="Country", DbType="varchar", CanBeNull=false)]
		[DebuggerNonUserCode]
		public string Country
		{
		    get { return _Country; }
		    set { _Country=value; _isModified_=true; }
		}
		
	
		[Column(Name="Phone", DbType="varchar", CanBeNull=true)]
		[DebuggerNonUserCode]
		public string Phone
		{
		    get { return _Phone; }
		    set { _Phone=value; _isModified_=true; }
		}
		
	#endregion
	    
	    #region GetHashCode(),Equals() - uses column _CustomerID to look up objects in liveObjectMap
	    //TODO: move this logic our of user code, into a generated class
	    public override int GetHashCode()
	    {
	        return _CustomerID.GetHashCode();
	    }
	    public override bool Equals(object obj)
	    {
	        Customer o2 = obj as Customer;
	        if(o2==null)
	            return false;
	        return _CustomerID.Equals(o2._CustomerID);
	    }
	    #endregion
	
	    
		[Association(Storage="null", OtherKey="CustomerID", Name="FK_orders_1")]
		public EntityMSet<Order> Orders
		{
		    get { return null; } //TODO L212
		}
	    
	}
	
	
	
	[Table(Name="orders")]
	public partial class Order : IModified
	{
	    bool _isModified_;
	    public bool IsModified 
	    { 
	        get { return _isModified_; } 
	        set { _isModified_ = value; } 
	    }
	
	    [DBLinq.Linq.Mapping.AutoGenId] 
		protected uint _OrderID;
	
		protected uint _CustomerID;
	
		protected uint _ProductID;
	
		protected DateTime _OrderDate;
	
	    
		#region costructors
		public Order()
		{
		}
		public Order(uint OrderID,uint CustomerID,uint ProductID,DateTime OrderDate)
		{
		    this._OrderID = OrderID;
		this._CustomerID = CustomerID;
		this._ProductID = ProductID;
		this._OrderDate = OrderDate;
		}
		#endregion
		
	
	    #region properties - accessors
	
		[Column(Name="OrderID", DbType="int", IsPrimaryKey=true, IsDbGenerated=true)]
		[DebuggerNonUserCode]
		public uint OrderID
		{
		    get { return _OrderID; }
		    set { _OrderID=value; _isModified_=true; }
		}
		
	
		[Column(Name="CustomerID", DbType="int", CanBeNull=false)]
		[DebuggerNonUserCode]
		public uint CustomerID
		{
		    get { return _CustomerID; }
		    set { _CustomerID=value; _isModified_=true; }
		}
		
	
		[Column(Name="ProductID", DbType="int", CanBeNull=false)]
		[DebuggerNonUserCode]
		public uint ProductID
		{
		    get { return _ProductID; }
		    set { _ProductID=value; _isModified_=true; }
		}
		
	
		[Column(Name="OrderDate", DbType="datetime", CanBeNull=false)]
		[DebuggerNonUserCode]
		public DateTime OrderDate
		{
		    get { return _OrderDate; }
		    set { _OrderDate=value; _isModified_=true; }
		}
		
	#endregion
	    
	    #region GetHashCode(),Equals() - uses column _OrderID to look up objects in liveObjectMap
	    //TODO: move this logic our of user code, into a generated class
	    public override int GetHashCode()
	    {
	        return _OrderID.GetHashCode();
	    }
	    public override bool Equals(object obj)
	    {
	        Order o2 = obj as Order;
	        if(o2==null)
	            return false;
	        return _OrderID.Equals(o2._OrderID);
	    }
	    #endregion
	
	    
	    
		private EntityRef<Product> _Product;    
		
		[Association(Storage="_Product", ThisKey="ProductID", Name="FK_orders_prod")]
		[DebuggerNonUserCode]
		public Product Product {
			get { return this._Product.Entity; }
			set { this._Product.Entity = value; }
		}
		
		
		private EntityRef<Customer> _Customer;    
		
		[Association(Storage="_Customer", ThisKey="CustomerID", Name="FK_orders_1")]
		[DebuggerNonUserCode]
		public Customer Customer {
			get { return this._Customer.Entity; }
			set { this._Customer.Entity = value; }
		}
		
	}
	
	
	
	[Table(Name="products")]
	public partial class Product : IModified
	{
	    bool _isModified_;
	    public bool IsModified 
	    { 
	        get { return _isModified_; } 
	        set { _isModified_ = value; } 
	    }
	
	    [DBLinq.Linq.Mapping.AutoGenId] 
		protected uint _ProductID;
	
		protected string _ProductName;
	
		protected uint _SupplierID;
	
		protected uint _CategoryID;
	
		protected string _QuantityPerUnit;
	
	    
		#region costructors
		public Product()
		{
		}
		public Product(uint ProductID,string ProductName,uint SupplierID,uint CategoryID,string QuantityPerUnit)
		{
		    this._ProductID = ProductID;
		this._ProductName = ProductName;
		this._SupplierID = SupplierID;
		this._CategoryID = CategoryID;
		this._QuantityPerUnit = QuantityPerUnit;
		}
		#endregion
		
	
	    #region properties - accessors
	
		[Column(Name="ProductID", DbType="int", IsPrimaryKey=true, IsDbGenerated=true)]
		[DebuggerNonUserCode]
		public uint ProductID
		{
		    get { return _ProductID; }
		    set { _ProductID=value; _isModified_=true; }
		}
		
	
		[Column(Name="ProductName", DbType="varchar", CanBeNull=false)]
		[DebuggerNonUserCode]
		public string ProductName
		{
		    get { return _ProductName; }
		    set { _ProductName=value; _isModified_=true; }
		}
		
	
		[Column(Name="SupplierID", DbType="int", CanBeNull=false)]
		[DebuggerNonUserCode]
		public uint SupplierID
		{
		    get { return _SupplierID; }
		    set { _SupplierID=value; _isModified_=true; }
		}
		
	
		[Column(Name="CategoryID", DbType="int", CanBeNull=false)]
		[DebuggerNonUserCode]
		public uint CategoryID
		{
		    get { return _CategoryID; }
		    set { _CategoryID=value; _isModified_=true; }
		}
		
	
		[Column(Name="QuantityPerUnit", DbType="varchar", CanBeNull=false)]
		[DebuggerNonUserCode]
		public string QuantityPerUnit
		{
		    get { return _QuantityPerUnit; }
		    set { _QuantityPerUnit=value; _isModified_=true; }
		}
		
	#endregion
	    
	    #region GetHashCode(),Equals() - uses column _ProductID to look up objects in liveObjectMap
	    //TODO: move this logic our of user code, into a generated class
	    public override int GetHashCode()
	    {
	        return _ProductID.GetHashCode();
	    }
	    public override bool Equals(object obj)
	    {
	        Product o2 = obj as Product;
	        if(o2==null)
	            return false;
	        return _ProductID.Equals(o2._ProductID);
	    }
	    #endregion
	
	    
		[Association(Storage="null", OtherKey="ProductID", Name="FK_orders_prod")]
		public EntityMSet<Order> Orders
		{
		    get { return null; } //TODO L212
		}
	    
	}
	
}

//#########################################################################
//generated by MySqlMetal on 2008-Jan-18 - extracted from server localhost.
//#########################################################################

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Text;
using System.Linq;
//using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Reflection;
using DBLinq.Linq;
using DBLinq.Linq.Mapping;

namespace allTypes
{
    
	/// <summary>
	/// This class represents MySql database AllTypes.
	/// </summary>
	public partial class AllTypes : DataContext
	{
		public AllTypes(string connStr) : base(new MySql.Data.MySqlClient.MySqlConnection( connStr))
		{
		}
		public AllTypes(System.Data.IDbConnection connection) : base(connection)
		{
		}
	
		//these fields represent tables in database and are
		//ordered - parent tables first, child tables next. Do not change the order.
		public Table<Othertype> Othertypes { get { return base.GetTable<Othertype>("Othertypes"); } }
		public Table<Floattype> Floattypes { get { return base.GetTable<Floattype>("Floattypes"); } }
		public Table<Allinttype> Allinttypes { get { return base.GetTable<Allinttype>("Allinttypes"); } }
	
		
	}
	
	
	
	[Table(Name = "othertypes")]
	public partial class Othertype : IModified
	{
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _id1;
		protected byte[] _blob;
		protected byte[] _blobN;
		protected DateTime _DateTime;
		protected DateTime? _DateTimeN;
		protected string _char;
		protected string _charN;
		protected string _text;
		protected string _textN;
	
		
		#region constructors
		public Othertype()
		{
		}
		public Othertype(int id1,byte[] blob,byte[] blobN,DateTime DateTime_,DateTime? DateTimeN,string char_,string charN,string text,string textN)
		{
		    this._id1 = id1;
		this._blob = blob;
		this._blobN = blobN;
		this._DateTime = DateTime_;
		this._DateTimeN = DateTimeN;
		this._char = char_;
		this._charN = charN;
		this._text = text;
		this._textN = textN;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Storage = "_id1", Name = "id1", DbType = "int", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int id1
		{
		    get { return _id1; }
		    set { _id1 = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_blob", Name = "blob", DbType = "blob", CanBeNull = false)]
		[DebuggerNonUserCode]
		public byte[] blob
		{
		    get { return _blob; }
		    set { _blob = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_blobN", Name = "blobN", DbType = "blob", CanBeNull = true)]
		[DebuggerNonUserCode]
		public byte[] blobN
		{
		    get { return _blobN; }
		    set { _blobN = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_DateTime", Name = "DateTime", DbType = "datetime", CanBeNull = false)]
		[DebuggerNonUserCode]
		public DateTime DateTime_
		{
		    get { return _DateTime; }
		    set { _DateTime = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_DateTimeN", Name = "DateTimeN", DbType = "datetime", CanBeNull = true)]
		[DebuggerNonUserCode]
		public DateTime? DateTimeN
		{
		    get { return _DateTimeN; }
		    set { _DateTimeN = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_char", Name = "char", DbType = "char(1)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string char_
		{
		    get { return _char; }
		    set { _char = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_charN", Name = "charN", DbType = "char(1)", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string charN
		{
		    get { return _charN; }
		    set { _charN = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_text", Name = "text", DbType = "text", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string text
		{
		    get { return _text; }
		    set { _text = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_textN", Name = "textN", DbType = "text", CanBeNull = true)]
		[DebuggerNonUserCode]
		public string textN
		{
		    get { return _textN; }
		    set { _textN = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _id1.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Othertype o2 = obj as Othertype;
			if(o2==null)
				return false;
			return _id1 == o2._id1;
		}
		#endregion
	
		#region childtables
		#endregion
		#region parenttables
		#endregion
	
		public bool IsModified { get; set; }
	}
	
	
	
	[Table(Name = "floattypes")]
	public partial class Floattype : IModified
	{
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _id1;
		protected double _double;
		protected double? _doubleN;
		protected decimal _decimal;
		protected decimal? _decimalN;
		protected float _float;
		protected float? _floatN;
		protected decimal _numeric;
		protected decimal? _numericN;
		protected double _real;
		protected double? _realN;
	
		
		#region constructors
		public Floattype()
		{
		}
		public Floattype(int id1,double double_,double? doubleN,decimal decimal_,decimal? decimalN,float float_,float? floatN,decimal numeric,decimal? numericN,double real,double? realN)
		{
		    this._id1 = id1;
		this._double = double_;
		this._doubleN = doubleN;
		this._decimal = decimal_;
		this._decimalN = decimalN;
		this._float = float_;
		this._floatN = floatN;
		this._numeric = numeric;
		this._numericN = numericN;
		this._real = real;
		this._realN = realN;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Storage = "_id1", Name = "id1", DbType = "int", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int id1
		{
		    get { return _id1; }
		    set { _id1 = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_double", Name = "double", DbType = "double", CanBeNull = false)]
		[DebuggerNonUserCode]
		public double double_
		{
		    get { return _double; }
		    set { _double = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_doubleN", Name = "doubleN", DbType = "double", CanBeNull = true)]
		[DebuggerNonUserCode]
		public double? doubleN
		{
		    get { return _doubleN; }
		    set { _doubleN = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_decimal", Name = "decimal", DbType = "decimal", CanBeNull = false)]
		[DebuggerNonUserCode]
		public decimal decimal_
		{
		    get { return _decimal; }
		    set { _decimal = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_decimalN", Name = "decimalN", DbType = "decimal", CanBeNull = true)]
		[DebuggerNonUserCode]
		public decimal? decimalN
		{
		    get { return _decimalN; }
		    set { _decimalN = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_float", Name = "float", DbType = "float", CanBeNull = false)]
		[DebuggerNonUserCode]
		public float float_
		{
		    get { return _float; }
		    set { _float = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_floatN", Name = "floatN", DbType = "float", CanBeNull = true)]
		[DebuggerNonUserCode]
		public float? floatN
		{
		    get { return _floatN; }
		    set { _floatN = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_numeric", Name = "numeric", DbType = "decimal", CanBeNull = false)]
		[DebuggerNonUserCode]
		public decimal numeric
		{
		    get { return _numeric; }
		    set { _numeric = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_numericN", Name = "numericN", DbType = "decimal", CanBeNull = true)]
		[DebuggerNonUserCode]
		public decimal? numericN
		{
		    get { return _numericN; }
		    set { _numericN = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_real", Name = "real", DbType = "double", CanBeNull = false)]
		[DebuggerNonUserCode]
		public double real
		{
		    get { return _real; }
		    set { _real = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_realN", Name = "realN", DbType = "double", CanBeNull = true)]
		[DebuggerNonUserCode]
		public double? realN
		{
		    get { return _realN; }
		    set { _realN = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _id1.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Floattype o2 = obj as Floattype;
			if(o2==null)
				return false;
			return _id1 == o2._id1;
		}
		#endregion
	
		#region childtables
		#endregion
		#region parenttables
		#endregion
	
		public bool IsModified { get; set; }
	}
	
	
	
	[Table(Name = "allinttypes")]
	public partial class Allinttype : IModified
	{
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected uint _int;
		protected uint? _intN;
		protected bool _boolean;
		protected bool? _boolN;
		protected char _byte;
		protected char? _byteN;
		protected int _short;
		protected int? _shortN;
		protected short _smallInt;
		protected short? _smallIntN;
		protected bool _tinyIntU;
		protected bool? _tinyIntUN;
		protected bool? _tinyIntS;
		protected long _bigInt;
		protected long? _bigIntN;
        protected nwind.DbLinq_EnumTest _DbLinq_EnumTest;
	
		
		#region constructors
		public Allinttype()
		{
		}
        public Allinttype(uint int_, uint? intN, bool boolean, bool? boolN, char byte_, char? byteN, int short_, int? shortN, short smallInt, short? smallIntN, bool tinyIntU, bool? tinyIntUN, bool? tinyIntS, long bigInt, long? bigIntN, nwind.DbLinq_EnumTest DbLinq_EnumTest)
		{
		    this._int = int_;
		this._intN = intN;
		this._boolean = boolean;
		this._boolN = boolN;
		this._byte = byte_;
		this._byteN = byteN;
		this._short = short_;
		this._shortN = shortN;
		this._smallInt = smallInt;
		this._smallIntN = smallIntN;
		this._tinyIntU = tinyIntU;
		this._tinyIntUN = tinyIntUN;
		this._tinyIntS = tinyIntS;
		this._bigInt = bigInt;
		this._bigIntN = bigIntN;
		this._DbLinq_EnumTest = DbLinq_EnumTest;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Storage = "_int", Name = "int", DbType = "int unsigned", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public uint int_
		{
		    get { return _int; }
		    set { _int = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_intN", Name = "intN", DbType = "int unsigned", CanBeNull = true)]
		[DebuggerNonUserCode]
		public uint? intN
		{
		    get { return _intN; }
		    set { _intN = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_boolean", Name = "boolean", DbType = "tinyint(1)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public bool boolean
		{
		    get { return _boolean; }
		    set { _boolean = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_boolN", Name = "boolN", DbType = "tinyint(1)", CanBeNull = true)]
		[DebuggerNonUserCode]
		public bool? boolN
		{
		    get { return _boolN; }
		    set { _boolN = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_byte", Name = "byte", DbType = "tinyint(3) unsigned", CanBeNull = false)]
		[DebuggerNonUserCode]
		public char byte_
		{
		    get { return _byte; }
		    set { _byte = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_byteN", Name = "byteN", DbType = "tinyint(3) unsigned", CanBeNull = true)]
		[DebuggerNonUserCode]
		public char? byteN
		{
		    get { return _byteN; }
		    set { _byteN = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_short", Name = "short", DbType = "mediumint unsigned", CanBeNull = false)]
		[DebuggerNonUserCode]
		public int short_
		{
		    get { return _short; }
		    set { _short = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_shortN", Name = "shortN", DbType = "mediumint unsigned", CanBeNull = true)]
		[DebuggerNonUserCode]
		public int? shortN
		{
		    get { return _shortN; }
		    set { _shortN = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_smallInt", Name = "smallInt", DbType = "smallint(5) unsigned", CanBeNull = false)]
		[DebuggerNonUserCode]
		public short smallInt
		{
		    get { return _smallInt; }
		    set { _smallInt = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_smallIntN", Name = "smallIntN", DbType = "smallint(5) unsigned", CanBeNull = true)]
		[DebuggerNonUserCode]
		public short? smallIntN
		{
		    get { return _smallIntN; }
		    set { _smallIntN = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_tinyIntU", Name = "tinyIntU", DbType = "tinyint(1) unsigned", CanBeNull = false)]
		[DebuggerNonUserCode]
		public bool tinyIntU
		{
		    get { return _tinyIntU; }
		    set { _tinyIntU = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_tinyIntUN", Name = "tinyIntUN", DbType = "tinyint(1) unsigned", CanBeNull = true)]
		[DebuggerNonUserCode]
		public bool? tinyIntUN
		{
		    get { return _tinyIntUN; }
		    set { _tinyIntUN = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_tinyIntS", Name = "tinyIntS", DbType = "tinyint(1)", CanBeNull = true)]
		[DebuggerNonUserCode]
		public bool? tinyIntS
		{
		    get { return _tinyIntS; }
		    set { _tinyIntS = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_bigInt", Name = "bigInt", DbType = "bigint(20)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public long bigInt
		{
		    get { return _bigInt; }
		    set { _bigInt = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_bigIntN", Name = "bigIntN", DbType = "bigint(20)", CanBeNull = true)]
		[DebuggerNonUserCode]
		public long? bigIntN
		{
		    get { return _bigIntN; }
		    set { _bigIntN = value; IsModified = true; }
		}
		
	
		[Column(Storage = "_DbLinq_EnumTest", Name = "DbLinq_EnumTest", DbType = "smallint(5) unsigned", CanBeNull = false)]
		[DebuggerNonUserCode]
        public nwind.DbLinq_EnumTest DbLinq_EnumTest
		{
		    get { return _DbLinq_EnumTest; }
		    set { _DbLinq_EnumTest = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _int.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Allinttype o2 = obj as Allinttype;
			if(o2==null)
				return false;
			return _int == o2._int;
		}
		#endregion
	
		#region childtables
		#endregion
		#region parenttables
		#endregion
	
		public bool IsModified { get; set; }
	}
	
}

//#########################################################################
//generated by MysqlMetal on 2007-Oct-31 - extracted from file nwind_mysql.dbml.
//#########################################################################

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Reflection;
using DBLinq.Linq;
using DBLinq.Linq.Mapping;

namespace nwind
{
    
	/// <summary>
	/// This class represents MySql database Northwind.
	/// </summary>
	public partial class Northwind : MContext
	{
		public Northwind(string connStr) : base(connStr)
		{
			Alltypes = new MTable<Alltype>(this);
			Categories = new MTable<Category>(this);
			Customers = new MTable<Customer>(this);
			Employees = new MTable<Employee>(this);
			EmployeeTerritories = new MTable<EmployeeTerritory>(this);
			OrderDetails = new MTable<OrderDetail>(this);
			Orders = new MTable<Order>(this);
			Products = new MTable<Product>(this);
			Regions = new MTable<Region>(this);
			Shippers = new MTable<Shipper>(this);
			Suppliers = new MTable<Supplier>(this);
			Territories = new MTable<Territory>(this);
		}
		public Northwind(System.Data.IDbConnection connection) : base(connection)
		{
			Alltypes = new MTable<Alltype>(this);
			Categories = new MTable<Category>(this);
			Customers = new MTable<Customer>(this);
			Employees = new MTable<Employee>(this);
			EmployeeTerritories = new MTable<EmployeeTerritory>(this);
			OrderDetails = new MTable<OrderDetail>(this);
			Orders = new MTable<Order>(this);
			Products = new MTable<Product>(this);
			Regions = new MTable<Region>(this);
			Shippers = new MTable<Shipper>(this);
			Suppliers = new MTable<Supplier>(this);
			Territories = new MTable<Territory>(this);
		}
	
		//these fields represent tables in database and are
		//ordered - parent tables first, child tables next. Do not change the order.
		public readonly MTable<Alltype> Alltypes;
		public readonly MTable<Category> Categories;
		public readonly MTable<Customer> Customers;
		public readonly MTable<Employee> Employees;
		public readonly MTable<EmployeeTerritory> EmployeeTerritories;
		public readonly MTable<OrderDetail> OrderDetails;
		public readonly MTable<Order> Orders;
		public readonly MTable<Product> Products;
		public readonly MTable<Region> Regions;
		public readonly MTable<Shipper> Shippers;
		public readonly MTable<Supplier> Suppliers;
		public readonly MTable<Territory> Territories;
	
			
		[FunctionEx(Name = "getOrderCount", ProcedureOrFunction = "FUNCTION")]	
		public int getOrderCount([Parameter(Name = "custId", DbType = "VARCHAR(5)")] string custId)	
		{	
			IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), custId);	
			return (int)result.ReturnValue;	
		}	
		
	
		
		[FunctionEx(Name = "hello0", ProcedureOrFunction = "FUNCTION")]	
		public string hello0()	
		{	
			IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));	
			return (string)result.ReturnValue;	
		}	
		
	
		
		[FunctionEx(Name = "hello1", ProcedureOrFunction = "FUNCTION")]	
		public string hello1([Parameter(Name = "s", DbType = "CHAR(20)")] string s)	
		{	
			IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), s);	
			return (string)result.ReturnValue;	
		}	
		
	
		
		[FunctionEx(Name = "hello2", ProcedureOrFunction = "FUNCTION")]	
		public string hello2([Parameter(Name = "s", DbType = "CHAR(20)")] string s
				,[Parameter(Name = "s2", DbType = "int")] int s2)	
		{	
			IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), s, s2);	
			return (string)result.ReturnValue;	
		}	
		
	
		
		[FunctionEx(Name = "sp_selOrders", ProcedureOrFunction = "PROCEDURE")]	
		public System.Data.DataSet sp_selOrders([Parameter(Name = "s", DbType = "CHAR(20)")] string s
				,[Parameter(Name = "s2", DbType = "int")]out  int s2)	
		{	
			IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), s);	
				s2 = (int) result.GetParameterValue(1);	
			return result.ReturnValue as System.Data.DataSet;	
		}	
		
	
		
		[FunctionEx(Name = "sp_updOrders", ProcedureOrFunction = "PROCEDURE")]	
		public void sp_updOrders([Parameter(Name = "custID", DbType = "int")] int custID
				,[Parameter(Name = "prodId", DbType = "int")] int prodId)	
		{	
			IExecuteResult result = base.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), custID, prodId);	
			return ;	
		}	
		
	}
	
	
	
	[Table(Name = "alltypes")]
	public partial class Alltype : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected uint _int;
	
		protected uint? _intN;
	
		protected double _double;
	
		protected double _doubleN;
	
		protected decimal _decimal;
	
		protected decimal _decimalN;
	
		protected byte[] _blob;
	
		protected byte[] _blobN;
	
		protected bool _boolean;
	
		protected bool? _boolN;
	
		protected char _byte;
	
		protected char? _byteN;
	
		protected DateTime _DateTime;
	
		protected DateTime? _DateTimeN;
	
		protected float _float;
	
		protected float _floatN;
	
		protected string _char;
	
		protected string _charN;
	
		protected string _text;
	
		protected string _textN;
	
		protected short _short;
	
		protected short? _shortN;
	
		protected decimal _numeric;
	
		protected decimal _numericN;
	
		protected double _real;
	
		protected double _realN;
	
		protected short _smallInt;
	
		protected short? _smallIntN;
	
		protected DbLinq_EnumTest _DbLinq_EnumTest;
	
		
		#region costructors
		public Alltype()
		{
		}
		public Alltype(uint int_,uint? intN,double double_,double doubleN,decimal decimal_,decimal decimalN,byte[] blob,byte[] blobN,bool boolean,bool? boolN,char byte_,char? byteN,DateTime DateTime,DateTime? DateTimeN,float float_,float floatN,string char_,string charN,string text,string textN,short short_,short? shortN,decimal numeric,decimal numericN,double real,double realN,short smallInt,short? smallIntN,DbLinq_EnumTest DbLinq_EnumTest)
		{
		    this._int = int_;
		this._intN = intN;
		this._double = double_;
		this._doubleN = doubleN;
		this._decimal = decimal_;
		this._decimalN = decimalN;
		this._blob = blob;
		this._blobN = blobN;
		this._boolean = boolean;
		this._boolN = boolN;
		this._byte = byte_;
		this._byteN = byteN;
		this._DateTime = DateTime;
		this._DateTimeN = DateTimeN;
		this._float = float_;
		this._floatN = floatN;
		this._char = char_;
		this._charN = charN;
		this._text = text;
		this._textN = textN;
		this._short = short_;
		this._shortN = shortN;
		this._numeric = numeric;
		this._numericN = numericN;
		this._real = real;
		this._realN = realN;
		this._smallInt = smallInt;
		this._smallIntN = smallIntN;
		this._DbLinq_EnumTest = DbLinq_EnumTest;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "int", DbType = "int unsigned", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public uint int_
		{
		    get { return _int; }
		    set { _int = value; IsModified = true; }
		}
		
	
		[Column(Name = "intN", DbType = "int unsigned", CanBeNull = false)]
		[DebuggerNonUserCode]
		public uint? intN
		{
		    get { return _intN; }
		    set { _intN = value; IsModified = true; }
		}
		
	
		[Column(Name = "double", DbType = "double", CanBeNull = false)]
		[DebuggerNonUserCode]
		public double double_
		{
		    get { return _double; }
		    set { _double = value; IsModified = true; }
		}
		
	
		[Column(Name = "doubleN", DbType = "double", CanBeNull = false)]
		[DebuggerNonUserCode]
		public double doubleN
		{
		    get { return _doubleN; }
		    set { _doubleN = value; IsModified = true; }
		}
		
	
		[Column(Name = "decimal", DbType = "decimal", CanBeNull = false)]
		[DebuggerNonUserCode]
		public decimal decimal_
		{
		    get { return _decimal; }
		    set { _decimal = value; IsModified = true; }
		}
		
	
		[Column(Name = "decimalN", DbType = "decimal", CanBeNull = false)]
		[DebuggerNonUserCode]
		public decimal decimalN
		{
		    get { return _decimalN; }
		    set { _decimalN = value; IsModified = true; }
		}
		
	
		[Column(Name = "blob", DbType = "blob", CanBeNull = false)]
		[DebuggerNonUserCode]
		public byte[] blob
		{
		    get { return _blob; }
		    set { _blob = value; IsModified = true; }
		}
		
	
		[Column(Name = "blobN", DbType = "blob", CanBeNull = false)]
		[DebuggerNonUserCode]
		public byte[] blobN
		{
		    get { return _blobN; }
		    set { _blobN = value; IsModified = true; }
		}
		
	
		[Column(Name = "boolean", DbType = "tinyint(1)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public bool boolean
		{
		    get { return _boolean; }
		    set { _boolean = value; IsModified = true; }
		}
		
	
		[Column(Name = "boolN", DbType = "tinyint(1)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public bool? boolN
		{
		    get { return _boolN; }
		    set { _boolN = value; IsModified = true; }
		}
		
	
		[Column(Name = "byte", DbType = "tinyint(3) unsigned", CanBeNull = false)]
		[DebuggerNonUserCode]
		public char byte_
		{
		    get { return _byte; }
		    set { _byte = value; IsModified = true; }
		}
		
	
		[Column(Name = "byteN", DbType = "tinyint(3) unsigned", CanBeNull = false)]
		[DebuggerNonUserCode]
		public char? byteN
		{
		    get { return _byteN; }
		    set { _byteN = value; IsModified = true; }
		}
		
	
		[Column(Name = "DateTime", DbType = "datetime", CanBeNull = false)]
		[DebuggerNonUserCode]
		public DateTime DateTime
		{
		    get { return _DateTime; }
		    set { _DateTime = value; IsModified = true; }
		}
		
	
		[Column(Name = "DateTimeN", DbType = "datetime", CanBeNull = false)]
		[DebuggerNonUserCode]
		public DateTime? DateTimeN
		{
		    get { return _DateTimeN; }
		    set { _DateTimeN = value; IsModified = true; }
		}
		
	
		[Column(Name = "float", DbType = "float", CanBeNull = false)]
		[DebuggerNonUserCode]
		public float float_
		{
		    get { return _float; }
		    set { _float = value; IsModified = true; }
		}
		
	
		[Column(Name = "floatN", DbType = "float", CanBeNull = false)]
		[DebuggerNonUserCode]
		public float floatN
		{
		    get { return _floatN; }
		    set { _floatN = value; IsModified = true; }
		}
		
	
		[Column(Name = "char", DbType = "char(1)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string char_
		{
		    get { return _char; }
		    set { _char = value; IsModified = true; }
		}
		
	
		[Column(Name = "charN", DbType = "char(1)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string charN
		{
		    get { return _charN; }
		    set { _charN = value; IsModified = true; }
		}
		
	
		[Column(Name = "text", DbType = "text", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string text
		{
		    get { return _text; }
		    set { _text = value; IsModified = true; }
		}
		
	
		[Column(Name = "textN", DbType = "text", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string textN
		{
		    get { return _textN; }
		    set { _textN = value; IsModified = true; }
		}
		
	
		[Column(Name = "short", DbType = "mediumint unsigned", CanBeNull = false)]
		[DebuggerNonUserCode]
		public short short_
		{
		    get { return _short; }
		    set { _short = value; IsModified = true; }
		}
		
	
		[Column(Name = "shortN", DbType = "mediumint unsigned", CanBeNull = false)]
		[DebuggerNonUserCode]
		public short? shortN
		{
		    get { return _shortN; }
		    set { _shortN = value; IsModified = true; }
		}
		
	
		[Column(Name = "numeric", DbType = "decimal", CanBeNull = false)]
		[DebuggerNonUserCode]
		public decimal numeric
		{
		    get { return _numeric; }
		    set { _numeric = value; IsModified = true; }
		}
		
	
		[Column(Name = "numericN", DbType = "decimal", CanBeNull = false)]
		[DebuggerNonUserCode]
		public decimal numericN
		{
		    get { return _numericN; }
		    set { _numericN = value; IsModified = true; }
		}
		
	
		[Column(Name = "real", DbType = "double", CanBeNull = false)]
		[DebuggerNonUserCode]
		public double real
		{
		    get { return _real; }
		    set { _real = value; IsModified = true; }
		}
		
	
		[Column(Name = "realN", DbType = "double", CanBeNull = false)]
		[DebuggerNonUserCode]
		public double realN
		{
		    get { return _realN; }
		    set { _realN = value; IsModified = true; }
		}
		
	
		[Column(Name = "smallInt", DbType = "smallint(5) unsigned", CanBeNull = false)]
		[DebuggerNonUserCode]
		public short smallInt
		{
		    get { return _smallInt; }
		    set { _smallInt = value; IsModified = true; }
		}
		
	
		[Column(Name = "smallIntN", DbType = "smallint(5) unsigned", CanBeNull = false)]
		[DebuggerNonUserCode]
		public short? smallIntN
		{
		    get { return _smallIntN; }
		    set { _smallIntN = value; IsModified = true; }
		}
		
	
		[Column(Name = "DbLinq_EnumTest", DbType = "smallint(5) unsigned", CanBeNull = false)]
		[DebuggerNonUserCode]
		public DbLinq_EnumTest DbLinq_EnumTest
		{
		    get { return _DbLinq_EnumTest; }
		    set { _DbLinq_EnumTest = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _int to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _int.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Alltype o2 = obj as Alltype;
			if(o2==null)
				return false;
			return _int.Equals(o2._int);
		}
		#endregion
	
		
		
	}
	
	
	
	[Table(Name = "categories")]
	public partial class Category : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _CategoryID;
	
		protected string _CategoryName;
	
		protected string _Description;
	
		protected byte[] _Picture;
	
		
		#region costructors
		public Category()
		{
		}
		public Category(int CategoryID,string CategoryName,string Description,byte[] Picture)
		{
		    this._CategoryID = CategoryID;
		this._CategoryName = CategoryName;
		this._Description = Description;
		this._Picture = Picture;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "CategoryID", DbType = "int", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int CategoryID
		{
		    get { return _CategoryID; }
		    set { _CategoryID = value; IsModified = true; }
		}
		
	
		[Column(Name = "CategoryName", DbType = "varchar(15)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string CategoryName
		{
		    get { return _CategoryName; }
		    set { _CategoryName = value; IsModified = true; }
		}
		
	
		[Column(Name = "Description", DbType = "text", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Description
		{
		    get { return _Description; }
		    set { _Description = value; IsModified = true; }
		}
		
	
		[Column(Name = "Picture", DbType = "blob", CanBeNull = false)]
		[DebuggerNonUserCode]
		public byte[] Picture
		{
		    get { return _Picture; }
		    set { _Picture = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _CategoryID to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _CategoryID.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Category o2 = obj as Category;
			if(o2==null)
				return false;
			return _CategoryID.Equals(o2._CategoryID);
		}
		#endregion
	
		
		[Association(Storage = "null", OtherKey = "CategoryID", Name = "FK_prod_catg")]
		public EntityMSet<Product> Products
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
	}
	
	
	
	[Table(Name = "customers")]
	public partial class Customer : IModified
	{
		public bool IsModified { get; set; }
	
		
		protected string _CustomerID;
	
		protected string _CompanyName;
	
		protected string _ContactName;
	
		protected string _ContactTitle;
	
		protected string _Address;
	
		protected string _City;
	
		protected string _Region;
	
		protected string _PostalCode;
	
		protected string _Country;
	
		protected string _Phone;
	
		protected string _Fax;
	
		
		#region costructors
		public Customer()
		{
		}
		public Customer(string CustomerID,string CompanyName,string ContactName,string ContactTitle,string Address,string City,string Region,string PostalCode,string Country,string Phone,string Fax)
		{
		    this._CustomerID = CustomerID;
		this._CompanyName = CompanyName;
		this._ContactName = ContactName;
		this._ContactTitle = ContactTitle;
		this._Address = Address;
		this._City = City;
		this._Region = Region;
		this._PostalCode = PostalCode;
		this._Country = Country;
		this._Phone = Phone;
		this._Fax = Fax;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "CustomerID", DbType = "varchar(5)", IsPrimaryKey = true)]
		[DebuggerNonUserCode]
		public string CustomerID
		{
		    get { return _CustomerID; }
		    set { _CustomerID = value; IsModified = true; }
		}
		
	
		[Column(Name = "CompanyName", DbType = "varchar(40)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string CompanyName
		{
		    get { return _CompanyName; }
		    set { _CompanyName = value; IsModified = true; }
		}
		
	
		[Column(Name = "ContactName", DbType = "varchar(30)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string ContactName
		{
		    get { return _ContactName; }
		    set { _ContactName = value; IsModified = true; }
		}
		
	
		[Column(Name = "ContactTitle", DbType = "varchar(30)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string ContactTitle
		{
		    get { return _ContactTitle; }
		    set { _ContactTitle = value; IsModified = true; }
		}
		
	
		[Column(Name = "Address", DbType = "varchar(60)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Address
		{
		    get { return _Address; }
		    set { _Address = value; IsModified = true; }
		}
		
	
		[Column(Name = "City", DbType = "varchar(15)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string City
		{
		    get { return _City; }
		    set { _City = value; IsModified = true; }
		}
		
	
		[Column(Name = "Region", DbType = "varchar(15)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Region
		{
		    get { return _Region; }
		    set { _Region = value; IsModified = true; }
		}
		
	
		[Column(Name = "PostalCode", DbType = "varchar(10)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string PostalCode
		{
		    get { return _PostalCode; }
		    set { _PostalCode = value; IsModified = true; }
		}
		
	
		[Column(Name = "Country", DbType = "varchar(15)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Country
		{
		    get { return _Country; }
		    set { _Country = value; IsModified = true; }
		}
		
	
		[Column(Name = "Phone", DbType = "varchar(24)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Phone
		{
		    get { return _Phone; }
		    set { _Phone = value; IsModified = true; }
		}
		
	
		[Column(Name = "Fax", DbType = "varchar(24)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Fax
		{
		    get { return _Fax; }
		    set { _Fax = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _CustomerID to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _CustomerID.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Customer o2 = obj as Customer;
			if(o2==null)
				return false;
			return _CustomerID.Equals(o2._CustomerID);
		}
		#endregion
	
		
		[Association(Storage = "null", OtherKey = "CustomerID", Name = "FK_orders_1")]
		public EntityMSet<Order> Orders
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
	}
	
	
	
	[Table(Name = "employees")]
	public partial class Employee : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _EmployeeID;
	
		protected string _LastName;
	
		protected string _FirstName;
	
		protected string _Title;
	
		protected DateTime? _BirthDate;
	
		protected DateTime? _HireDate;
	
		protected string _Address;
	
		protected string _City;
	
		protected string _Region;
	
		protected string _PostalCode;
	
		protected string _Country;
	
		protected string _HomePhone;
	
		protected byte[] _Photo;
	
		protected string _Notes;
	
		protected int? _ReportsTo;
	
		
		#region costructors
		public Employee()
		{
		}
		public Employee(int EmployeeID,string LastName,string FirstName,string Title,DateTime? BirthDate,DateTime? HireDate,string Address,string City,string Region,string PostalCode,string Country,string HomePhone,byte[] Photo,string Notes,int? ReportsTo)
		{
		    this._EmployeeID = EmployeeID;
		this._LastName = LastName;
		this._FirstName = FirstName;
		this._Title = Title;
		this._BirthDate = BirthDate;
		this._HireDate = HireDate;
		this._Address = Address;
		this._City = City;
		this._Region = Region;
		this._PostalCode = PostalCode;
		this._Country = Country;
		this._HomePhone = HomePhone;
		this._Photo = Photo;
		this._Notes = Notes;
		this._ReportsTo = ReportsTo;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "EmployeeID", DbType = "int", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int EmployeeID
		{
		    get { return _EmployeeID; }
		    set { _EmployeeID = value; IsModified = true; }
		}
		
	
		[Column(Name = "LastName", DbType = "varchar(20)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string LastName
		{
		    get { return _LastName; }
		    set { _LastName = value; IsModified = true; }
		}
		
	
		[Column(Name = "FirstName", DbType = "varchar(10)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string FirstName
		{
		    get { return _FirstName; }
		    set { _FirstName = value; IsModified = true; }
		}
		
	
		[Column(Name = "Title", DbType = "varchar(30)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Title
		{
		    get { return _Title; }
		    set { _Title = value; IsModified = true; }
		}
		
	
		[Column(Name = "BirthDate", DbType = "datetime", CanBeNull = false)]
		[DebuggerNonUserCode]
		public DateTime? BirthDate
		{
		    get { return _BirthDate; }
		    set { _BirthDate = value; IsModified = true; }
		}
		
	
		[Column(Name = "HireDate", DbType = "datetime", CanBeNull = false)]
		[DebuggerNonUserCode]
		public DateTime? HireDate
		{
		    get { return _HireDate; }
		    set { _HireDate = value; IsModified = true; }
		}
		
	
		[Column(Name = "Address", DbType = "varchar(60)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Address
		{
		    get { return _Address; }
		    set { _Address = value; IsModified = true; }
		}
		
	
		[Column(Name = "City", DbType = "varchar(15)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string City
		{
		    get { return _City; }
		    set { _City = value; IsModified = true; }
		}
		
	
		[Column(Name = "Region", DbType = "varchar(15)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Region
		{
		    get { return _Region; }
		    set { _Region = value; IsModified = true; }
		}
		
	
		[Column(Name = "PostalCode", DbType = "varchar(10)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string PostalCode
		{
		    get { return _PostalCode; }
		    set { _PostalCode = value; IsModified = true; }
		}
		
	
		[Column(Name = "Country", DbType = "varchar(15)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Country
		{
		    get { return _Country; }
		    set { _Country = value; IsModified = true; }
		}
		
	
		[Column(Name = "HomePhone", DbType = "varchar(24)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string HomePhone
		{
		    get { return _HomePhone; }
		    set { _HomePhone = value; IsModified = true; }
		}
		
	
		[Column(Name = "Photo", DbType = "blob", CanBeNull = false)]
		[DebuggerNonUserCode]
		public byte[] Photo
		{
		    get { return _Photo; }
		    set { _Photo = value; IsModified = true; }
		}
		
	
		[Column(Name = "Notes", DbType = "text", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Notes
		{
		    get { return _Notes; }
		    set { _Notes = value; IsModified = true; }
		}
		
	
		[Column(Name = "ReportsTo", DbType = "int", CanBeNull = false)]
		[DebuggerNonUserCode]
		public int? ReportsTo
		{
		    get { return _ReportsTo; }
		    set { _ReportsTo = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _EmployeeID to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _EmployeeID.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Employee o2 = obj as Employee;
			if(o2==null)
				return false;
			return _EmployeeID.Equals(o2._EmployeeID);
		}
		#endregion
	
		
		[Association(Storage = "null", OtherKey = "EmployeeID", Name = "FK_Emp_ReportsToEmp")]
		public EntityMSet<Employee> Employees
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
		[Association(Storage = "null", OtherKey = "EmployeeID", Name = "FK_EmpTerr_Emp")]
		public EntityMSet<EmployeeTerritory> EmployeeTerritories
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
		[Association(Storage = "null", OtherKey = "EmployeeID", Name = "FK_orders_emp")]
		public EntityMSet<Order> Orders
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
		private EntityRef<Employee> _Employee;    
		
		[Association(Storage="_Employee", ThisKey="ReportsTo", Name="FK_Emp_ReportsToEmp")]
		[DebuggerNonUserCode]
		public Employee ReportsToEmployee {
			get { return this._Employee.Entity; }
			set { this._Employee.Entity = value; }
		}
		
	}
	
	
	
	[Table(Name = "employeeterritories")]
	public partial class EmployeeTerritory : IModified
	{
		public bool IsModified { get; set; }
	
		
		protected int _EmployeeID;
	
		protected string _TerritoryID;
	
		
		#region costructors
		public EmployeeTerritory()
		{
		}
		public EmployeeTerritory(int EmployeeID,string TerritoryID)
		{
		    this._EmployeeID = EmployeeID;
		this._TerritoryID = TerritoryID;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "EmployeeID", DbType = "int", CanBeNull = false)]
		[DebuggerNonUserCode]
		public int EmployeeID
		{
		    get { return _EmployeeID; }
		    set { _EmployeeID = value; IsModified = true; }
		}
		
	
		[Column(Name = "TerritoryID", DbType = "varchar(20)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string TerritoryID
		{
		    get { return _TerritoryID; }
		    set { _TerritoryID = value; IsModified = true; }
		}
		
	#endregion
		#warning L189 table employeeterritories has no primary key. Multiple c# objects will refer to the same row.

		
		
		private EntityRef<Territory> _Territory;    
		
		[Association(Storage="_Territory", ThisKey="TerritoryID", Name="FK_EmpTerr_Terr")]
		[DebuggerNonUserCode]
		public Territory Territory {
			get { return this._Territory.Entity; }
			set { this._Territory.Entity = value; }
		}
		
		
		private EntityRef<Employee> _Employee;    
		
		[Association(Storage="_Employee", ThisKey="EmployeeID", Name="FK_EmpTerr_Emp")]
		[DebuggerNonUserCode]
		public Employee Employee {
			get { return this._Employee.Entity; }
			set { this._Employee.Entity = value; }
		}
		
	}
	
	
	
	[Table(Name = "order details")]
	public partial class OrderDetail : IModified
	{
		public bool IsModified { get; set; }
	
		
		protected int _OrderID;
	
		protected int _ProductID;
	
		protected decimal _UnitPrice;
	
		protected short _Quantity;
	
		protected float _Discount;
	
		
		#region costructors
		public OrderDetail()
		{
		}
		public OrderDetail(int OrderID,int ProductID,decimal UnitPrice,short Quantity,float Discount)
		{
		    this._OrderID = OrderID;
		this._ProductID = ProductID;
		this._UnitPrice = UnitPrice;
		this._Quantity = Quantity;
		this._Discount = Discount;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "OrderID", DbType = "int", IsPrimaryKey = true)]
		[DebuggerNonUserCode]
		public int OrderID
		{
		    get { return _OrderID; }
		    set { _OrderID = value; IsModified = true; }
		}
		
	
		[Column(Name = "ProductID", DbType = "int", IsPrimaryKey = true)]
		[DebuggerNonUserCode]
		public int ProductID
		{
		    get { return _ProductID; }
		    set { _ProductID = value; IsModified = true; }
		}
		
	
		[Column(Name = "UnitPrice", DbType = "decimal", CanBeNull = false)]
		[DebuggerNonUserCode]
		public decimal UnitPrice
		{
		    get { return _UnitPrice; }
		    set { _UnitPrice = value; IsModified = true; }
		}
		
	
		[Column(Name = "Quantity", DbType = "smallint(6)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public short Quantity
		{
		    get { return _Quantity; }
		    set { _Quantity = value; IsModified = true; }
		}
		
	
		[Column(Name = "Discount", DbType = "float", CanBeNull = false)]
		[DebuggerNonUserCode]
		public float Discount
		{
		    get { return _Discount; }
		    set { _Discount = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _OrderID to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _OrderID.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			OrderDetail o2 = obj as OrderDetail;
			if(o2==null)
				return false;
			return _OrderID.Equals(o2._OrderID);
		}
		#endregion
	
		
		
		private EntityRef<Product> _Product;    
		
		[Association(Storage="_Product", ThisKey="ProductID", Name="FK_ordersDetails_Prod")]
		[DebuggerNonUserCode]
		public Product Product {
			get { return this._Product.Entity; }
			set { this._Product.Entity = value; }
		}
		
		
		private EntityRef<Order> _Order;    
		
		[Association(Storage="_Order", ThisKey="OrderID", Name="FK_ordersDetails_Ord")]
		[DebuggerNonUserCode]
		public Order Order {
			get { return this._Order.Entity; }
			set { this._Order.Entity = value; }
		}
		
	}
	
	
	
	[Table(Name = "orders")]
	public partial class Order : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _OrderID;
	
		protected string _CustomerID;
	
		protected int? _EmployeeID;
	
		protected DateTime? _OrderDate;
	
		protected DateTime? _RequiredDate;
	
		protected DateTime? _ShippedDate;
	
		protected int? _ShipVia;
	
		protected decimal _Freight;
	
		protected string _ShipName;
	
		protected string _ShipAddress;
	
		protected string _ShipCity;
	
		protected string _ShipRegion;
	
		protected string _ShipPostalCode;
	
		protected string _ShipCountry;
	
		
		#region costructors
		public Order()
		{
		}
		public Order(int OrderID,string CustomerID,int? EmployeeID,DateTime? OrderDate,DateTime? RequiredDate,DateTime? ShippedDate,int? ShipVia,decimal Freight,string ShipName,string ShipAddress,string ShipCity,string ShipRegion,string ShipPostalCode,string ShipCountry)
		{
		    this._OrderID = OrderID;
		this._CustomerID = CustomerID;
		this._EmployeeID = EmployeeID;
		this._OrderDate = OrderDate;
		this._RequiredDate = RequiredDate;
		this._ShippedDate = ShippedDate;
		this._ShipVia = ShipVia;
		this._Freight = Freight;
		this._ShipName = ShipName;
		this._ShipAddress = ShipAddress;
		this._ShipCity = ShipCity;
		this._ShipRegion = ShipRegion;
		this._ShipPostalCode = ShipPostalCode;
		this._ShipCountry = ShipCountry;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "OrderID", DbType = "int", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int OrderID
		{
		    get { return _OrderID; }
		    set { _OrderID = value; IsModified = true; }
		}
		
	
		[Column(Name = "CustomerID", DbType = "varchar(5)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string CustomerID
		{
		    get { return _CustomerID; }
		    set { _CustomerID = value; IsModified = true; }
		}
		
	
		[Column(Name = "EmployeeID", DbType = "int", CanBeNull = false)]
		[DebuggerNonUserCode]
		public int? EmployeeID
		{
		    get { return _EmployeeID; }
		    set { _EmployeeID = value; IsModified = true; }
		}
		
	
		[Column(Name = "OrderDate", DbType = "datetime", CanBeNull = false)]
		[DebuggerNonUserCode]
		public DateTime? OrderDate
		{
		    get { return _OrderDate; }
		    set { _OrderDate = value; IsModified = true; }
		}
		
	
		[Column(Name = "RequiredDate", DbType = "datetime", CanBeNull = false)]
		[DebuggerNonUserCode]
		public DateTime? RequiredDate
		{
		    get { return _RequiredDate; }
		    set { _RequiredDate = value; IsModified = true; }
		}
		
	
		[Column(Name = "ShippedDate", DbType = "datetime", CanBeNull = false)]
		[DebuggerNonUserCode]
		public DateTime? ShippedDate
		{
		    get { return _ShippedDate; }
		    set { _ShippedDate = value; IsModified = true; }
		}
		
	
		[Column(Name = "ShipVia", DbType = "int", CanBeNull = false)]
		[DebuggerNonUserCode]
		public int? ShipVia
		{
		    get { return _ShipVia; }
		    set { _ShipVia = value; IsModified = true; }
		}
		
	
		[Column(Name = "Freight", DbType = "decimal", CanBeNull = false)]
		[DebuggerNonUserCode]
		public decimal Freight
		{
		    get { return _Freight; }
		    set { _Freight = value; IsModified = true; }
		}
		
	
		[Column(Name = "ShipName", DbType = "varchar(40)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string ShipName
		{
		    get { return _ShipName; }
		    set { _ShipName = value; IsModified = true; }
		}
		
	
		[Column(Name = "ShipAddress", DbType = "varchar(60)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string ShipAddress
		{
		    get { return _ShipAddress; }
		    set { _ShipAddress = value; IsModified = true; }
		}
		
	
		[Column(Name = "ShipCity", DbType = "varchar(15)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string ShipCity
		{
		    get { return _ShipCity; }
		    set { _ShipCity = value; IsModified = true; }
		}
		
	
		[Column(Name = "ShipRegion", DbType = "varchar(15)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string ShipRegion
		{
		    get { return _ShipRegion; }
		    set { _ShipRegion = value; IsModified = true; }
		}
		
	
		[Column(Name = "ShipPostalCode", DbType = "varchar(10)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string ShipPostalCode
		{
		    get { return _ShipPostalCode; }
		    set { _ShipPostalCode = value; IsModified = true; }
		}
		
	
		[Column(Name = "ShipCountry", DbType = "varchar(15)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string ShipCountry
		{
		    get { return _ShipCountry; }
		    set { _ShipCountry = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _OrderID to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _OrderID.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Order o2 = obj as Order;
			if(o2==null)
				return false;
			return _OrderID.Equals(o2._OrderID);
		}
		#endregion
	
		
		[Association(Storage = "null", OtherKey = "OrderID", Name = "FK_ordersDetails_Ord")]
		public EntityMSet<OrderDetail> OrderDetails
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
		private EntityRef<Employee> _Employee;    
		
		[Association(Storage="_Employee", ThisKey="EmployeeID", Name="FK_orders_emp")]
		[DebuggerNonUserCode]
		public Employee Employee {
			get { return this._Employee.Entity; }
			set { this._Employee.Entity = value; }
		}
		
		
		private EntityRef<Customer> _Customer;    
		
		[Association(Storage="_Customer", ThisKey="CustomerID", Name="FK_orders_1")]
		[DebuggerNonUserCode]
		public Customer Customer {
			get { return this._Customer.Entity; }
			set { this._Customer.Entity = value; }
		}
		
	}
	
	
	
	[Table(Name = "products")]
	public partial class Product : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _ProductID;
	
		protected string _ProductName;
	
		protected int? _SupplierID;
	
		protected int? _CategoryID;
	
		protected string _QuantityPerUnit;
	
		protected decimal _UnitPrice;
	
		protected short? _UnitsInStock;
	
		protected short? _UnitsOnOrder;
	
		protected short? _ReorderLevel;
	
		protected bool _Discontinued;
	
		
		#region costructors
		public Product()
		{
		}
		public Product(int ProductID,string ProductName,int? SupplierID,int? CategoryID,string QuantityPerUnit,decimal UnitPrice,short? UnitsInStock,short? UnitsOnOrder,short? ReorderLevel,bool Discontinued)
		{
		    this._ProductID = ProductID;
		this._ProductName = ProductName;
		this._SupplierID = SupplierID;
		this._CategoryID = CategoryID;
		this._QuantityPerUnit = QuantityPerUnit;
		this._UnitPrice = UnitPrice;
		this._UnitsInStock = UnitsInStock;
		this._UnitsOnOrder = UnitsOnOrder;
		this._ReorderLevel = ReorderLevel;
		this._Discontinued = Discontinued;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "ProductID", DbType = "int", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int ProductID
		{
		    get { return _ProductID; }
		    set { _ProductID = value; IsModified = true; }
		}
		
	
		[Column(Name = "ProductName", DbType = "varchar(40)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string ProductName
		{
		    get { return _ProductName; }
		    set { _ProductName = value; IsModified = true; }
		}
		
	
		[Column(Name = "SupplierID", DbType = "int", CanBeNull = false)]
		[DebuggerNonUserCode]
		public int? SupplierID
		{
		    get { return _SupplierID; }
		    set { _SupplierID = value; IsModified = true; }
		}
		
	
		[Column(Name = "CategoryID", DbType = "int", CanBeNull = false)]
		[DebuggerNonUserCode]
		public int? CategoryID
		{
		    get { return _CategoryID; }
		    set { _CategoryID = value; IsModified = true; }
		}
		
	
		[Column(Name = "QuantityPerUnit", DbType = "varchar(20)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string QuantityPerUnit
		{
		    get { return _QuantityPerUnit; }
		    set { _QuantityPerUnit = value; IsModified = true; }
		}
		
	
		[Column(Name = "UnitPrice", DbType = "decimal", CanBeNull = false)]
		[DebuggerNonUserCode]
		public decimal UnitPrice
		{
		    get { return _UnitPrice; }
		    set { _UnitPrice = value; IsModified = true; }
		}
		
	
		[Column(Name = "UnitsInStock", DbType = "smallint(6)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public short? UnitsInStock
		{
		    get { return _UnitsInStock; }
		    set { _UnitsInStock = value; IsModified = true; }
		}
		
	
		[Column(Name = "UnitsOnOrder", DbType = "smallint(6)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public short? UnitsOnOrder
		{
		    get { return _UnitsOnOrder; }
		    set { _UnitsOnOrder = value; IsModified = true; }
		}
		
	
		[Column(Name = "ReorderLevel", DbType = "smallint(6)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public short? ReorderLevel
		{
		    get { return _ReorderLevel; }
		    set { _ReorderLevel = value; IsModified = true; }
		}
		
	
		[Column(Name = "Discontinued", DbType = "bit(1)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public bool Discontinued
		{
		    get { return _Discontinued; }
		    set { _Discontinued = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _ProductID to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _ProductID.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Product o2 = obj as Product;
			if(o2==null)
				return false;
			return _ProductID.Equals(o2._ProductID);
		}
		#endregion
	
		
		[Association(Storage = "null", OtherKey = "ProductID", Name = "FK_ordersDetails_Prod")]
		public EntityMSet<OrderDetail> OrderDetails
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
		private EntityRef<Supplier> _Supplier;    
		
		[Association(Storage="_Supplier", ThisKey="SupplierID", Name="FK_prod_supp")]
		[DebuggerNonUserCode]
		public Supplier Supplier {
			get { return this._Supplier.Entity; }
			set { this._Supplier.Entity = value; }
		}
		
		
		private EntityRef<Category> _Category;    
		
		[Association(Storage="_Category", ThisKey="CategoryID", Name="FK_prod_catg")]
		[DebuggerNonUserCode]
		public Category Category {
			get { return this._Category.Entity; }
			set { this._Category.Entity = value; }
		}
		
	}
	
	
	
	[Table(Name = "region")]
	public partial class Region : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _RegionID;
	
		protected string _RegionDescription;
	
		
		#region costructors
		public Region()
		{
		}
		public Region(int RegionID,string RegionDescription)
		{
		    this._RegionID = RegionID;
		this._RegionDescription = RegionDescription;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "RegionID", DbType = "int", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int RegionID
		{
		    get { return _RegionID; }
		    set { _RegionID = value; IsModified = true; }
		}
		
	
		[Column(Name = "RegionDescription", DbType = "varchar(50)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string RegionDescription
		{
		    get { return _RegionDescription; }
		    set { _RegionDescription = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _RegionID to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _RegionID.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Region o2 = obj as Region;
			if(o2==null)
				return false;
			return _RegionID.Equals(o2._RegionID);
		}
		#endregion
	
		
		[Association(Storage = "null", OtherKey = "RegionID", Name = "FK_Terr_Region")]
		public EntityMSet<Territory> Territories
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
	}
	
	
	
	[Table(Name = "shippers")]
	public partial class Shipper : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _ShipperID;
	
		protected string _CompanyName;
	
		protected string _Phone;
	
		
		#region costructors
		public Shipper()
		{
		}
		public Shipper(int ShipperID,string CompanyName,string Phone)
		{
		    this._ShipperID = ShipperID;
		this._CompanyName = CompanyName;
		this._Phone = Phone;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "ShipperID", DbType = "int", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int ShipperID
		{
		    get { return _ShipperID; }
		    set { _ShipperID = value; IsModified = true; }
		}
		
	
		[Column(Name = "CompanyName", DbType = "varchar(40)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string CompanyName
		{
		    get { return _CompanyName; }
		    set { _CompanyName = value; IsModified = true; }
		}
		
	
		[Column(Name = "Phone", DbType = "varchar(24)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Phone
		{
		    get { return _Phone; }
		    set { _Phone = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _ShipperID to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _ShipperID.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Shipper o2 = obj as Shipper;
			if(o2==null)
				return false;
			return _ShipperID.Equals(o2._ShipperID);
		}
		#endregion
	
		
		
	}
	
	
	
	[Table(Name = "suppliers")]
	public partial class Supplier : IModified
	{
		public bool IsModified { get; set; }
	
		[DBLinq.Linq.Mapping.AutoGenId] 
		protected int _SupplierID;
	
		protected string _CompanyName;
	
		protected string _ContactName;
	
		protected string _ContactTitle;
	
		protected string _Address;
	
		protected string _City;
	
		protected string _Region;
	
		protected string _PostalCode;
	
		protected string _Country;
	
		protected string _Phone;
	
		protected string _Fax;
	
		
		#region costructors
		public Supplier()
		{
		}
		public Supplier(int SupplierID,string CompanyName,string ContactName,string ContactTitle,string Address,string City,string Region,string PostalCode,string Country,string Phone,string Fax)
		{
		    this._SupplierID = SupplierID;
		this._CompanyName = CompanyName;
		this._ContactName = ContactName;
		this._ContactTitle = ContactTitle;
		this._Address = Address;
		this._City = City;
		this._Region = Region;
		this._PostalCode = PostalCode;
		this._Country = Country;
		this._Phone = Phone;
		this._Fax = Fax;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "SupplierID", DbType = "int", IsPrimaryKey = true, IsDbGenerated = true)]
		[DebuggerNonUserCode]
		public int SupplierID
		{
		    get { return _SupplierID; }
		    set { _SupplierID = value; IsModified = true; }
		}
		
	
		[Column(Name = "CompanyName", DbType = "varchar(40)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string CompanyName
		{
		    get { return _CompanyName; }
		    set { _CompanyName = value; IsModified = true; }
		}
		
	
		[Column(Name = "ContactName", DbType = "varchar(30)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string ContactName
		{
		    get { return _ContactName; }
		    set { _ContactName = value; IsModified = true; }
		}
		
	
		[Column(Name = "ContactTitle", DbType = "varchar(30)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string ContactTitle
		{
		    get { return _ContactTitle; }
		    set { _ContactTitle = value; IsModified = true; }
		}
		
	
		[Column(Name = "Address", DbType = "varchar(60)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Address
		{
		    get { return _Address; }
		    set { _Address = value; IsModified = true; }
		}
		
	
		[Column(Name = "City", DbType = "varchar(15)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string City
		{
		    get { return _City; }
		    set { _City = value; IsModified = true; }
		}
		
	
		[Column(Name = "Region", DbType = "varchar(15)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Region
		{
		    get { return _Region; }
		    set { _Region = value; IsModified = true; }
		}
		
	
		[Column(Name = "PostalCode", DbType = "varchar(10)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string PostalCode
		{
		    get { return _PostalCode; }
		    set { _PostalCode = value; IsModified = true; }
		}
		
	
		[Column(Name = "Country", DbType = "varchar(15)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Country
		{
		    get { return _Country; }
		    set { _Country = value; IsModified = true; }
		}
		
	
		[Column(Name = "Phone", DbType = "varchar(24)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Phone
		{
		    get { return _Phone; }
		    set { _Phone = value; IsModified = true; }
		}
		
	
		[Column(Name = "Fax", DbType = "varchar(24)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string Fax
		{
		    get { return _Fax; }
		    set { _Fax = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _SupplierID to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _SupplierID.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Supplier o2 = obj as Supplier;
			if(o2==null)
				return false;
			return _SupplierID.Equals(o2._SupplierID);
		}
		#endregion
	
		
		[Association(Storage = "null", OtherKey = "SupplierID", Name = "FK_prod_supp")]
		public EntityMSet<Product> Products
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
	}
	
	
	
	[Table(Name = "territories")]
	public partial class Territory : IModified
	{
		public bool IsModified { get; set; }
	
		
		protected string _TerritoryID;
	
		protected string _TerritoryDescription;
	
		protected int _RegionID;
	
		
		#region costructors
		public Territory()
		{
		}
		public Territory(string TerritoryID,string TerritoryDescription,int RegionID)
		{
		    this._TerritoryID = TerritoryID;
		this._TerritoryDescription = TerritoryDescription;
		this._RegionID = RegionID;
		}
		#endregion
		
	
		#region properties - accessors
	
		[Column(Name = "TerritoryID", DbType = "varchar(20)", IsPrimaryKey = true)]
		[DebuggerNonUserCode]
		public string TerritoryID
		{
		    get { return _TerritoryID; }
		    set { _TerritoryID = value; IsModified = true; }
		}
		
	
		[Column(Name = "TerritoryDescription", DbType = "varchar(50)", CanBeNull = false)]
		[DebuggerNonUserCode]
		public string TerritoryDescription
		{
		    get { return _TerritoryDescription; }
		    set { _TerritoryDescription = value; IsModified = true; }
		}
		
	
		[Column(Name = "RegionID", DbType = "int", CanBeNull = false)]
		[DebuggerNonUserCode]
		public int RegionID
		{
		    get { return _RegionID; }
		    set { _RegionID = value; IsModified = true; }
		}
		
	#endregion
		
		#region GetHashCode(),Equals() - uses column _TerritoryID to look up objects in liveObjectMap
		//TODO: move this logic our of user code, into a generated class
		public override int GetHashCode()
		{
			return _TerritoryID.GetHashCode();
		}
		public override bool Equals(object obj)
		{
			Territory o2 = obj as Territory;
			if(o2==null)
				return false;
			return _TerritoryID.Equals(o2._TerritoryID);
		}
		#endregion
	
		
		[Association(Storage = "null", OtherKey = "TerritoryID", Name = "FK_EmpTerr_Terr")]
		public EntityMSet<EmployeeTerritory> EmployeeTerritories
		{
		    get { return null; } //L212 - child data available only when part of query
		}
		
		private EntityRef<Region> _Region;    
		
		[Association(Storage="_Region", ThisKey="RegionID", Name="FK_Terr_Region")]
		[DebuggerNonUserCode]
		public Region Region {
			get { return this._Region.Entity; }
			set { this._Region.Entity = value; }
		}
		
	}
	
}

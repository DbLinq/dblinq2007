//#########################################################################
//generated by MysqlMetal on 2007-Jun-04 - extracted from server localhost.
//#########################################################################

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Text;
#if LINQ_PREVIEW_2006
//Visual Studio 2005 with Linq Preview May 2006 - can run on Win2000
using System.Query;
using System.Data.DLinq;
#else
//Visual Studio Orcas - requires WinXP
using System.Linq;
using System.Data.Linq;
#endif

using DBLinq.Linq;

namespace Client2.user
{
    
	/// <summary>
	/// This class represents PostgreSQL database LinqTestDB.
	/// </summary>
	public partial class LinqTestDB : MContext
	{
	    public LinqTestDB(string connStr):base(connStr)
	    {
	        Customers = new MTable<Customer>(this);
			Products = new MTable<Product>(this);
			Orders = new MTable<Order>(this);
	    }
	
	    //these fields represent tables in database and are
	    //ordered - parent tables first, child tables next. Do not change the order.
	    public readonly MTable<Customer> Customers;
		public readonly MTable<Product> Products;
		public readonly MTable<Order> Orders;
	}
	
	
	
	[Table(Name="customer")]
	public partial class Customer : IModified
	{
	    bool _isModified_;
	    public bool IsModified 
	    { 
	        get { return _isModified_; } 
	        set { _isModified_ = value; } 
	    }
	
	    
		protected string _companyname;
	
		protected string _contactname;
	
		protected string _city;
	
		protected string _postalcode;
	
		protected string _country;
	
		protected string _phone;
	[DBLinq.Linq.AutoGenId] 
		protected int _customerid;
	
	    
		#region costructors
		public Customer()
		{
		}
		public Customer(string companyname,string contactname,string city,string postalcode,string country,string phone,int customerid)
		{
		    this._companyname = companyname;
		this._contactname = contactname;
		this._city = city;
		this._postalcode = postalcode;
		this._country = country;
		this._phone = phone;
		this._customerid = customerid;
		}
		#endregion
		
	
	    #region properties - accessors
	
		[Column(Name="companyname", DBType="character varying")]
		[DebuggerNonUserCode]
		public string CompanyName
		{
		    get { return _companyname; }
		    set { _companyname=value; _isModified_=true; }
		}
		
	
		[Column(Name="contactname", DBType="character varying")]
		[DebuggerNonUserCode]
		public string ContactName
		{
		    get { return _contactname; }
		    set { _contactname=value; _isModified_=true; }
		}
		
	
		[Column(Name="city", DBType="character varying")]
		[DebuggerNonUserCode]
		public string City
		{
		    get { return _city; }
		    set { _city=value; _isModified_=true; }
		}
		
	
		[Column(Name="postalcode", DBType="character varying")]
		[DebuggerNonUserCode]
		public string PostalCode
		{
		    get { return _postalcode; }
		    set { _postalcode=value; _isModified_=true; }
		}
		
	
		[Column(Name="country", DBType="character varying")]
		[DebuggerNonUserCode]
		public string Country
		{
		    get { return _country; }
		    set { _country=value; _isModified_=true; }
		}
		
	
		[Column(Name="phone", DBType="character varying")]
		[DebuggerNonUserCode]
		public string Phone
		{
		    get { return _phone; }
		    set { _phone=value; _isModified_=true; }
		}
		
	
		[Column(Name="customerid", IsDBGenerated=true, DBType="integer", IsPrimaryKey=true)]
		[DebuggerNonUserCode]
		public int CustomerID
		{
		    get { return _customerid; }
		    set { _customerid=value; _isModified_=true; }
		}
		
	#endregion
	    
	    #region GetHashCode(),Equals() - uses column _customerid to look up objects in liveObjectMap
	    //TODO: move this logic our of user code, into a generated class
	    public override int GetHashCode()
	    {
	        return _customerid.GetHashCode();
	    }
	    public override bool Equals(object obj)
	    {
	        Customer o2 = obj as Customer;
	        if(o2==null)
	            return false;
	        return _customerid.Equals(o2._customerid);
	    }
	    #endregion
	
	    
		[Association(Storage="null", OtherKey="customerid", Name="fk_order_customer")]
		public EntityMSet<Order> Orders
		{
		    get { return null; } //TODO L212
		}
	    
	}
	
	
	
	[Table(Name="products")]
	public partial class Product : IModified
	{
	    bool _isModified_;
	    public bool IsModified 
	    { 
	        get { return _isModified_; } 
	        set { _isModified_ = value; } 
	    }
	
	    
		protected string _productname;
	
		protected int _supplierid;
	
		protected int _categoryid;
	
		protected string _quantityperunit;
	[DBLinq.Linq.AutoGenId] 
		protected int _productid;
	
	    
		#region costructors
		public Product()
		{
		}
		public Product(string productname,int supplierid,int categoryid,string quantityperunit,int productid)
		{
		    this._productname = productname;
		this._supplierid = supplierid;
		this._categoryid = categoryid;
		this._quantityperunit = quantityperunit;
		this._productid = productid;
		}
		#endregion
		
	
	    #region properties - accessors
	
		[Column(Name="productname", DBType="character varying")]
		[DebuggerNonUserCode]
		public string ProductName
		{
		    get { return _productname; }
		    set { _productname=value; _isModified_=true; }
		}
		
	
		[Column(Name="supplierid", DBType="integer")]
		[DebuggerNonUserCode]
		public int SupplierID
		{
		    get { return _supplierid; }
		    set { _supplierid=value; _isModified_=true; }
		}
		
	
		[Column(Name="categoryid", DBType="integer")]
		[DebuggerNonUserCode]
		public int CategoryID
		{
		    get { return _categoryid; }
		    set { _categoryid=value; _isModified_=true; }
		}
		
	
		[Column(Name="quantityperunit", DBType="character varying")]
		[DebuggerNonUserCode]
		public string QuantityPerUnit
		{
		    get { return _quantityperunit; }
		    set { _quantityperunit=value; _isModified_=true; }
		}
		
	
		[Column(Name="productid", IsDBGenerated=true, DBType="integer", IsPrimaryKey=true)]
		[DebuggerNonUserCode]
		public int ProductID
		{
		    get { return _productid; }
		    set { _productid=value; _isModified_=true; }
		}
		
	#endregion
	    
	    #region GetHashCode(),Equals() - uses column _productid to look up objects in liveObjectMap
	    //TODO: move this logic our of user code, into a generated class
	    public override int GetHashCode()
	    {
	        return _productid.GetHashCode();
	    }
	    public override bool Equals(object obj)
	    {
	        Product o2 = obj as Product;
	        if(o2==null)
	            return false;
	        return _productid.Equals(o2._productid);
	    }
	    #endregion
	
	    
		[Association(Storage="null", OtherKey="productid", Name="fk_order_product")]
		public EntityMSet<Order> Orders
		{
		    get { return null; } //TODO L212
		}
	    
	}
	
	
	
	[Table(Name="orders")]
	public partial class Order : IModified
	{
	    bool _isModified_;
	    public bool IsModified 
	    { 
	        get { return _isModified_; } 
	        set { _isModified_ = value; } 
	    }
	
	    
		protected int _customerid;
	
		protected int _productid;
	
		protected DateTime _orderdate;
	[DBLinq.Linq.AutoGenId] 
		protected int _orderid;
	
	    
		#region costructors
		public Order()
		{
		}
		public Order(int customerid,int productid,DateTime orderdate,int orderid)
		{
		    this._customerid = customerid;
		this._productid = productid;
		this._orderdate = orderdate;
		this._orderid = orderid;
		}
		#endregion
		
	
	    #region properties - accessors
	
		[Column(Name="customerid", DBType="integer")]
		[DebuggerNonUserCode]
		public int CustomerID
		{
		    get { return _customerid; }
		    set { _customerid=value; _isModified_=true; }
		}
		
	
		[Column(Name="productid", DBType="integer")]
		[DebuggerNonUserCode]
		public int ProductID
		{
		    get { return _productid; }
		    set { _productid=value; _isModified_=true; }
		}
		
	
		[Column(Name="orderdate", DBType="timestamp without time zone")]
		[DebuggerNonUserCode]
		public DateTime OrderDate
		{
		    get { return _orderdate; }
		    set { _orderdate=value; _isModified_=true; }
		}
		
	
		[Column(Name="orderid", IsDBGenerated=true, DBType="integer", IsPrimaryKey=true)]
		[DebuggerNonUserCode]
		public int OrderID
		{
		    get { return _orderid; }
		    set { _orderid=value; _isModified_=true; }
		}
		
	#endregion
	    
	    #region GetHashCode(),Equals() - uses column _orderid to look up objects in liveObjectMap
	    //TODO: move this logic our of user code, into a generated class
	    public override int GetHashCode()
	    {
	        return _orderid.GetHashCode();
	    }
	    public override bool Equals(object obj)
	    {
	        Order o2 = obj as Order;
	        if(o2==null)
	            return false;
	        return _orderid.Equals(o2._orderid);
	    }
	    #endregion
	
	    
	    
		private EntityRef<Customer> _Customer;    
		
		[Association(Storage="_Customer", ThisKey="customerid", Name="fk_order_customer")]
		[DebuggerNonUserCode]
		public Customer Customer {
			get { return this._Customer.Entity; }
			set { this._Customer.Entity = value; }
		}
		
		
		private EntityRef<Product> _Product;    
		
		[Association(Storage="_Product", ThisKey="productid", Name="fk_order_product")]
		[DebuggerNonUserCode]
		public Product Product {
			get { return this._Product.Entity; }
			set { this._Product.Entity = value; }
		}
		
	}
	
}
